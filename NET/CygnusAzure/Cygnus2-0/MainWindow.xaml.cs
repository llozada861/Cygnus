using Cygnus2_0.General;
using Cygnus2_0.Pages;
using FirstFloor.ModernUI.Windows;
using FirstFloor.ModernUI.Windows.Controls;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using FirstFloor.ModernUI.Windows.Navigation;
using Notifications.Wpf;
using Cygnus2_0.Security;
using Cygnus2_0.ViewModel.Security;
using System.Threading;
using Cygnus2_0.Pages.Settings;
using Cygnus2_0.Pages.Settings.General;
using Cygnus2_0.BaseDatos.sqlite;
using Cygnus2_0.DAO;
using Cygnus2_0.Pages.SolInfo;
using Cygnus2_0.Pages.Settings.AzureData;
using res = Cygnus2_0.Properties.Resources;
using System.Reflection;
using System.IO;
using System.Security;
using Cygnus2_0.Model.Settings;
using System.Globalization;
using Cygnus2_0.Pages.Settings.Git;
using Cygnus2_0.Pages.Settings.Sonar;
using Cygnus2_0.Pages.Settings.AdminGeneral;
using Microsoft.VisualStudio.Services.CircuitBreaker;

namespace Cygnus2_0
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : ModernWindow
    {
        private Handler handler;
        UserControl userControls;

        public MainWindow()
        {
            InitializeComponent();

            try
            {                
                handler = new Handler();

                pInstalarActuaLocal();

                handler.pInicializar();
                pVersion();
            }
            catch(Exception ex)
            {
                System.Windows.MessageBox.Show(ex.Message, "Error", System.Windows.MessageBoxButton.OK, System.Windows.MessageBoxImage.Error);
            }
        }

        public Handler Handler
        {
            get { return handler; }
            set { handler = value; }
        }

        public void pVersion()
        {
            System.Reflection.Assembly executingAssembly = System.Reflection.Assembly.GetExecutingAssembly();
            var fieVersionInfo = FileVersionInfo.GetVersionInfo(executingAssembly.Location);
                            
            try
            {
                this.Title = "Cygnus [" + fieVersionInfo.FileVersion + "] - Empresa [" + handler.ConfGeneralView.Model.Empresa.Descripcion + "] - Base Datos ["+ handler.ConnView.Model.Conexion.Etiqueta + "]";
            }
            catch
            {
                 this.Title = "Cygnus [" + fieVersionInfo.FileVersion + "]";
            }

            handler.fsbVersion = fieVersionInfo.FileVersion;
        }

        private void ModernWindow_Loaded(object sender, RoutedEventArgs e)
        {
            string version;
            Boolean actualiza = false;

            Thread.CurrentThread.CurrentCulture = CultureInfo.GetCultureInfo("es-CO");

            Next = true;

            try
            {
                if (handler.ConfGeneralView.Model.Empresa == null)
                {
                    userControls = new UCGeneral();
                    RequetInfo request = new RequetInfo(userControls,handler, this, "Antes de empezar, configure la Empresa...",res.KEY_EMPRESA);
                    request.ShowDialog();
                }

                if (handler.ConnView.Model.Usuario == null)
                {
                    userControls = new UCConection(res.Nuevo);
                    RequetInfo request = new RequetInfo(userControls, handler, this, "Antes de empezar, configura la conexión a la base de datos...",res.CONEXION_BD);
                    request.ShowDialog();
                }

                if (handler.ConfGeneralView.Model.RutaSqlplus.Equals(res.RutaSqlplusDefault))
                {
                    userControls = new PathsUserControl();
                    RequetInfo request = new RequetInfo(userControls, handler, this, "Antes de empezar, configura la ruta del sqlplus...",res.SQLPLUS);
                    request.ShowDialog();
                }

                if (handler.ConfGeneralView.Model.Empresa.Sonar == res.YES && string.IsNullOrEmpty(handler.RutaSonar))
                {
                    userControls = new UserControlSonar();
                    RequetInfo request = new RequetInfo(userControls, handler, this, "Antes de empezar, configura o instala el Sonar...",null);
                    request.ShowDialog();
                }

                /*if (string.IsNullOrEmpty(handler.Azure.Usuario))
                {
                    userControls = new Azure();
                    RequetInfo request = new RequetInfo(userControls, handler, this, "Antes de empezar, configura Azure...", null);
                    request.ShowDialog();
                }*/
            }
            catch (Exception ex)
            {
                System.Windows.MessageBox.Show(ex.Message, "Error", System.Windows.MessageBoxButton.OK, System.Windows.MessageBoxImage.Error);
            }

            try
            {
                handler.pRealizaConexion();

                if (handler.ConfGeneralView.Model.Empresa.Azure == res.No && Next && string.IsNullOrEmpty(handler.ConnView.Model.UsuarioAzure)) 
                {
                    userControls = new Azure();
                    RequetInfo request = new RequetInfo(userControls, handler, this, "Antes de empezar, configura el acceso a AzureDevops",null);
                    request.ShowDialog();
                }

                //Se valida si se debe actualizar automáticamente
                if (handler.ConexionOracle.ConexionOracleSQL != null)
                {
                    if (handler.ConexionOracle.ConexionOracleSQL.State == System.Data.ConnectionState.Open)
                    {
                        version = handler.DAO.pObtCodigoVersion();

                        if (!handler.fsbVersion.Equals(version))
                        {
                            try
                            {
                                actualiza = true;

                                UpdateModel.pDescargarActualizacion(handler.ConnView.Model.Usuario,handler.ConnView.Model.Pass, version,handler.ConnView.Model.Servidor, handler.ConnView.Model.BaseDatos, handler.ConnView.Model.Puerto);
                                this.Close();
                            }
                            catch { }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                System.Windows.MessageBox.Show(ex.Message, "Error", System.Windows.MessageBoxButton.OK, System.Windows.MessageBoxImage.Error);
            }

            if (!actualiza)
            {
                ContentSource = new Uri("/Pages/Home.xaml", UriKind.Relative);                
            }
        }

        private Boolean next;

        public Boolean Next
        {
            get { return next; }
            set { next = value; }
        }

        private void WindowArea_Loaded(object sender, RoutedEventArgs e)
        {
           
        }

        private void Grid_Loaded(object sender, RoutedEventArgs e)
        {
        }

        private void pObtParamEntrada()
        {
            string cmdLn = "";
            string up = "";

            foreach (string arg in Environment.GetCommandLineArgs())
            {
                cmdLn += arg;
            }

            if (cmdLn.IndexOf('|') > -1)
            {
                string[] tmpCmd = cmdLn.Split('|');

                for (int i = 1; i < tmpCmd.GetLength(0); i++)
                {
                    if (tmpCmd[i] == "Up") up = tmpCmd[i + 1];
                    i++;
                }
            }
        }

        private string pTraeVersion()
        {
            string file;
            string sbLine;
            string[] substrings;
            char delimiter = ';';
            string Version = "";

            file = System.IO.Path.Combine(Environment.CurrentDirectory, res.ArchivoVersion);

            using (StreamReader streamReader = new StreamReader(file, Encoding.Default))
            {
                sbLine = streamReader.ReadLine();
                substrings = sbLine.Split(delimiter);
                Version = substrings[0]; //Version
            }

            return Version;
        }

        private void pObtenerCredencialesOD(out string url, out string usuario, out string pass, out string rutaversion, out string rutaZip)
        {
            string sbLine;
            string sbLineUnWrap;
            string[] substrings;
            char delimiter = '|';

            url = "";
            usuario = "";
            pass = "";
            rutaversion = "";
            rutaZip = "";

            string ArchivoCred = System.IO.Path.Combine(Environment.CurrentDirectory, res.ArchivoCredenciales);

            using (StreamReader streamReader = new StreamReader(ArchivoCred, Encoding.Default))
            {
                sbLine = streamReader.ReadLine();

                if (!string.IsNullOrEmpty(sbLine))
                {
                    //Se desencripta la linea con las credenciales
                    sbLineUnWrap = EncriptaPass.Desencriptar(sbLine);

                    substrings = sbLineUnWrap.Split(delimiter);
                    url = substrings[0];
                    usuario = substrings[1];
                    pass = substrings[2];
                    rutaversion = substrings[3];
                    rutaZip = substrings[4];
                }
            }
        }

        private void ModernWindow_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            if (handler.GuardarTiempos)
            {
                handler.MensajeError("Hay cambios pendientes por guardar en la hoja de horas.");
                e.Cancel = true;
            }
        }

        public void pInstalarActuaLocal()
        {
            System.Reflection.Assembly executingAssembly = System.Reflection.Assembly.GetExecutingAssembly();
            var fieVersionInfo = FileVersionInfo.GetVersionInfo(executingAssembly.Location);

            /*** ULTIMA VERSION AL FINAL!!!!! ***/

            if (!SqliteDAO.pblValidaVersion("1.1.5.7"))
            {
                SqliteDAO.pCreaConfiguracion(res.KeyGeneraHTML, "True");

                string[] query =
                 {
                    "INSERT INTO object_type (codigo, object, slash, count_slash, priority) VALUES (35, 'APLICA GRANT', '', '0', 200)"
                };

                foreach (string sql in query)
                {
                    try
                    {
                        SqliteDAO.pExecuteNonQuery(sql);
                    }
                    catch (Exception ex) { }
                }

                SqliteDAO.pActualizaVersion("1.1.5.7");
            }

            if (!SqliteDAO.pblValidaVersion("1.1.6.5"))
            {
                SqliteDAO.pCreaConfiguracion(res.KeyCorreoGeneral, "personalepmopen");

                string[] query =
                 {
                    "alter table userbd add password TEXT",
                    "alter table userbd add basedatos text",
                    "delete from userbd",
                    "INSERT INTO userbd (user, company, password, basedatos) VALUES ('FLEX', '99', 'Opentest2020', 'SFDLLO')",
                    "INSERT INTO userbd (user, company, password, basedatos) VALUES ('FLEX_CUSTOMIZACION', '99', 'Actver82021', 'SFDLLO')",
                    "INSERT INTO userbd (user, company, password, basedatos) VALUES ('OPENSIRIUS', '99', 'opensv82021', 'SFDLLO')",
                    "INSERT INTO html (name, documentation, company) VALUES ('PKTBL', 'declare\r\n    PROCEDURE pGenerapktbl\r\n    (\r\n        isbTabla IN VARCHAR2,\r\n        isbOwner IN VARCHAR2,\r\n        isOrder  IN VARCHAR2,\r\n        oclFile  OUT CLOB,\r\n        onuErrorCode    OUT NUMBER,\r\n        osbErrorMessage OUT VARCHAR2 \r\n    )\r\n    IS    \r\n    \r\n        csbTABLA            varchar2( 100 ) := isbTabla;\r\n        csbOWNER            varchar2( 100 ) := isbOwner;\r\n        csbWO               varchar2( 100 ) := isOrder;\r\n        csbEXISTE           constant number := 12202;\r\n        csbNO_EXISTE        constant number := 12201;\r\n        csbRUTA_ARCHIVO     constant varchar2( 200 ) := ''/output/traza'';\r\n        \r\n        -- Variable para construir funciones de campos\r\n        sbFunction              VARCHAR2(32000);\r\n        -- Parámetros de entrada de llave primaria como argumentos de entrada\r\n        sbParamPK               VARCHAR2(2000);        \r\n        -- Parámetros de entrada de la PK\r\n        sbVariablesPK           VARCHAR2(2000);\r\n        -- Listado de variables de entrada que componen la PK, para imprimirse en mensajes\r\n        sbCamposPKParaOutput    VARCHAR2(2000);\r\n        -- Listado de variables de entrada que componen la PK, para imprimirse en mensajes (Encomillada)\r\n        sbCamposPKParaOutputCom VARCHAR2(2000);\r\n        -- Campos igualados a la variable\r\n        sbWherePorPK            VARCHAR2(2000);                \r\n        \r\n        -- Cascarón para la especificación de una función\r\n        csbSpecTemplateFunction   VARCHAR2(32000) :=\r\n''\r\n    -- Obtención del campo <Campo>\r\n    FUNCTION <Type>Get<Campo>\r\n    (\r\n        <ParamPK>\r\n        INUCACHE    IN  NUMBER  DEFAULT 1\r\n    )\r\n    RETURN <Tabla>.<Campo>%TYPE;\r\n'';\r\n        \r\n        -- Cascarón para una función de obtención por campo\r\n        csbTemplateFunction   VARCHAR2(32000) := \r\n''\r\n    -- Obtención del campo <Campo>\r\n    FUNCTION <Type>Get<Campo>\r\n    (\r\n        <ParamPK>\r\n        INUCACHE    IN  NUMBER  DEFAULT 1\r\n    )\r\n    RETURN <Tabla>.<Campo>%TYPE\r\n    IS\r\n    BEGIN\r\n        pkErrors.Push(''''pktbl<Tabla>.<Type>Get<Campo>'''');\r\n        \r\n        -- Valida si el dato está en memoria\r\n        \r\n        AccKey\r\n        ( \r\n            <pk>    INUCACHE \r\n        );\r\n        \r\n        pkErrors.pop;\r\n        \r\n        -- Obtiene el dato\r\n        RETURN (rc<Tabla>.<Campo>);\r\n    EXCEPTION\r\n        WHEN LOGIN_DENIED THEN\r\n            pkErrors.Pop;\r\n            RAISE LOGIN_DENIED;\r\n    END <Type>Get<Campo>;\r\n'';\r\n\r\n        -- Cascarón para la especificación de un procedimiento update\r\n        csbSpecTemplateProc   VARCHAR2(32000) :=\r\n''\r\n    -- Actualización del campo <Campo>\r\n    PROCEDURE pUpd<Campo>\r\n    (\r\n        <ParamPK>\r\n        <ParamCampo>\r\n    );\r\n'';\r\n\r\n        -- Cascarón para un procedimiento de actualización por campo\r\n        csbTemplateUpdate   VARCHAR2(32000) := \r\n''\r\n    -- Actualización del campo <Campo>\r\n    PROCEDURE pUpd<Campo>\r\n    (\r\n        <ParamPK>\r\n        <ParamCampo>\r\n    )\r\n    IS\r\n    BEGIN\r\n        pkErrors.Push(''''pktbl<Tabla>.pUpd<Campo>'''');\r\n        \r\n        UPDATE  <Tabla>\r\n        SET     <Campo> = <AliasCampo>\r\n        WHERE   <Condicion>;\r\n        \r\n        IF (SQL%NOTFOUND) THEN\r\n            pkErrors.pop;\r\n            RAISE NO_DATA_FOUND;\r\n        END IF;\r\n        \r\n        -- Actualiza la copia en memoria\r\n        rc<Tabla>.<Campo> := <AliasCampo>;\r\n        \r\n        pkErrors.pop;\r\n        \r\n    EXCEPTION\r\n        WHEN NO_DATA_FOUND THEN\r\n            pkErrors.SetErrorCode( csbDIVISION, csbMODULE, cnuRECORD_NO_EXISTE );\r\n            pkErrors.ADDSUFFIXTOMESSAGE ( csbTABLA_PK||''||''<sbCamposPKParaOutputSinCom>||''''''||''] )''||CHR(39)||'');\r\n            RAISE LOGIN_DENIED;\r\n    END pUpd<Campo>;\r\n'';\r\n        \r\n        gsbTableCap     varchar2( 100 );  \r\n    \r\n        CURSOR cuPrimaria IS\r\n            select  --+ ordered\r\n                    tcol.table_name, tcol.column_name, tcol.data_type, tcol.data_length, tcol.data_precision, tcol.data_scale,\r\n                    ''i'' || decode( tcol.data_type, ''NUMBER'', ''nu'', ''VARCHAR2'', ''sb'', ''DATE'', ''dt'', ''BOOLEAN'', ''bo'', ''CLOB'', ''cl'', ''BLOB'', ''bl'', ''XMLTYPE'', ''xm'' ) || substr( tcol.column_name, 1, 1 ) || lower( substr( tcol.column_name, 2 ) ) alias,\r\n                    ''i'' || decode( tcol.data_type, ''NUMBER'', ''nu'', ''VARCHAR2'', ''sb'', ''DATE'', ''dt'', ''BOOLEAN'', ''bo'', ''CLOB'', ''cl'', ''BLOB'', ''bl'', ''XMLTYPE'', ''xm'' ) || substr( tcol.column_name, 1, 1 ) || lower( substr( tcol.column_name, 2 ) ) || '' '' || ''IN'' || '' '' || lower( tcol.table_name || ''.'' || tcol.column_name) || ''%TYPE''  param_entrada\r\n            from    all_constraints cons, all_cons_columns ccol, all_tab_columns tcol\r\n            where   cons.table_name = upper( csbTABLA )\r\n            and     cons.constraint_type = ''P''\r\n            and     cons.owner = upper( csbOWNER )\r\n            and     ccol.owner = cons.owner\r\n            and     ccol.constraint_name = cons.constraint_name\r\n            and     ccol.table_name = cons.table_name\r\n            and     tcol.owner = ccol.owner\r\n            and     tcol.table_name = ccol.table_name\r\n            and     tcol.column_name = ccol.column_name\r\n            order by ccol.position;\r\n            \r\n            \r\n        CURSOR cuCampos IS\r\n            select  ------+ ordered\r\n                    tcol.table_name, tcol.column_name, lower( tcol.column_name ) alias, data_type,\r\n                    ''i'' || decode( data_type, ''NUMBER'', ''nu'', ''VARCHAR2'', ''sb'', ''DATE'', ''dt'', ''BOOLEAN'', ''bo'', ''CLOB'', ''cl'', ''BLOB'', ''bl'', ''XMLTYPE'', ''xm'' ) || substr( tcol.column_name, 1, 1 ) || lower( substr( tcol.column_name, 2 ) ) param_alias,\r\n                    ''i'' || decode( data_type, ''NUMBER'', ''nu'', ''VARCHAR2'', ''sb'', ''DATE'', ''dt'', ''BOOLEAN'', ''bo'', ''CLOB'', ''cl'', ''BLOB'', ''bl'', ''XMLTYPE'', ''xm'' ) || substr( tcol.column_name, 1, 1 ) || lower( substr( tcol.column_name, 2 ) ) || '' '' || ''IN'' || '' '' || lower( tcol.table_name || ''.'' || tcol.column_name) || ''%TYPE''  param_entrada\r\n            from    all_tab_columns tcol\r\n            where   tcol.table_name = upper( csbTABLA )\r\n            and     tcol.owner = upper( csbOWNER )\r\n            ORDER BY column_id;\r\n                    \r\n        TYPE tytbPrimaria IS TABLE OF cuPrimaria%rowtype INDEX BY binary_integer;\r\n        TYPE tytbCampos IS TABLE OF cuCampos%rowtype INDEX BY binary_integer;\r\n        \r\n        flArchivo       utl_file.file_type;\r\n        tbPrimaria      tytbPrimaria;\r\n        tbCampos        tytbCampos;\r\n        rcPrimaria      cuPrimaria%rowtype;\r\n        sbExiste        varchar2( 1 );    \r\n        sbCadena        varchar2( 32767 );\r\n        sbUser          varchar2( 20 );\r\n        sbTipoDato      varchar2( 20 );    \r\n        \r\n        FUNCTION fsbTipoDato ( \r\n            isbTipoDato     IN  VARCHAR2,\r\n            iboIsTable      IN  BOOLEAN DEFAULT FALSE,\r\n            iboIsFunction   IN  BOOLEAN DEFAULT FALSE\r\n        )\r\n        RETURN VARCHAR2\r\n        IS\r\n            sbToken     VARCHAR2(20) := NULL;\r\n            sbPrefijo   VARCHAR2(1) := ''i'';\r\n        BEGIN            \r\n                \r\n            -- Si es para una función, inicia con f\r\n            IF (iboIsFunction) THEN\r\n                sbPrefijo := ''f'';\r\n            END IF;\r\n        \r\n            -- Si es tipo para una tabla, siempre es tb\r\n            IF (iboIsTable) THEN\r\n                sbToken := sbPrefijo||''tb'';\r\n            ELSE\r\n                -- Selecciona según el tipo de dato\r\n                CASE UPPER(isbTipoDato) \r\n                    WHEN ''NUMBER'' THEN\r\n                        sbToken := sbPrefijo||''nu'';\r\n                    WHEN ''VARCHAR2'' THEN\r\n                        sbToken := sbPrefijo||''sb'';\r\n                    WHEN ''CHAR'' THEN\r\n                        sbToken := sbPrefijo||''sb'';\r\n                    WHEN ''DATE'' THEN\r\n                        sbToken := sbPrefijo||''dt'';\r\n                    WHEN ''CLOB'' THEN\r\n                        sbToken := sbPrefijo||''cl'';\r\n                    WHEN ''BLOB'' THEN\r\n                        sbToken := sbPrefijo||''bl'';\r\n                    WHEN ''XMLTYPE'' THEN\r\n                        sbToken := sbPrefijo||''xm'';\r\n                END CASE;\r\n            END IF;\r\n            RETURN sbToken;   \r\n        END;\r\n        \r\n        /***************************************************************************\r\n        <Procedure Fuente=\"Propiedad Intelectual de Empresas Públicas de Medellín\">\r\n          <Unidad>fboCampoEnPrimaryKey</Unidad>\r\n          <Descripcion>\r\n                Indica si un campo está en la llave primaria\r\n          </Descripcion>\r\n          <Autor>Diego Fernando Coba - MVM Ingenieria de Software</Autor>\r\n          <Fecha> 03-Mar-2020 </Fecha>\r\n          <Parametros>\r\n            <param nombre=\"param1\" tipo=\"TYPE\" Direccion=\"In/Out\" >\r\n                Descripción\r\n            </param>\r\n            <param nombre=\"param2\" tipo=\"TYPE\" Direccion=\"In/Out\" >\r\n                Descripción\r\n            </param>\r\n            <param nombre=\"param3\" tipo=\"TYPE\" Direccion=\"In/Out\" >\r\n                Descripción\r\n            </param>\r\n          </Parametros>\r\n          <Retorno Nombre=\"boEstaEnPK\" Tipo=\"BOOLEAN\">\r\n                Indica si el campo está en la llave primaria\r\n          </Retorno>\r\n          <Historial>\r\n            <Modificacion Autor=\"dcoba\" Fecha=\"03-Mar-2020\" Inc=\"\">\r\n                Creación.\r\n            </Modificacion>\r\n          </Historial>\r\n        </Procedure>\r\n        ***************************************************************************/\r\n        FUNCTION fboCampoEnPrimaryKey \r\n        (\r\n            itbLlavePrimaria    IN  tytbPrimaria,\r\n            isbCampo            IN  all_tab_columns.COLUMN_NAME%TYPE\r\n        )\r\n        RETURN BOOLEAN\r\n        IS       \r\n            /* Indica si el campo está en la llave primaria */\r\n            boEstaEnPK          BOOLEAN := FALSE;\r\n            \r\n            nuIndex             BINARY_INTEGER;\r\n            \r\n        BEGIN                                  \r\n\r\n            /* Recorre la colección de registros */\r\n            nuIndex := itbLlavePrimaria.FIRST;\r\n            \r\n            LOOP\r\n                EXIT WHEN nuIndex IS NULL;\r\n                \r\n                /* Si el campo está en la PK retorna TRUE */\r\n                IF ( itbLlavePrimaria(nuIndex).column_name = isbCampo ) THEN\r\n                    boEstaEnPK := TRUE;\r\n                    EXIT;\r\n                END IF;\r\n                    \r\n                /* Avanza al siguiente registro */\r\n                nuIndex := itbLlavePrimaria.NEXT(nuIndex);\r\n            \r\n            END LOOP;   \r\n        \r\n            RETURN boEstaEnPK;\r\n                \r\n        EXCEPTION\r\n            WHEN Epm_Errors.EX_CTRLERROR THEN\r\n                RAISE;\r\n            WHEN OTHERS THEN\r\n                Epm_Errors.SetError;\r\n                RAISE Epm_Errors.EX_CTRLERROR;\r\n        END fboCampoEnPrimaryKey; \r\n        \r\n    BEGIN\r\n        dbms_lob.createtemporary(lob_loc => oclFile, cache => true, dur => dbms_lob.session);\r\n        --oclFile := NULL; --EMPTY_CLOB();\r\n        --DBMS_LOB.APPEND(oclFile, CHR(10)||''PRUEBA'');\r\n        onuErrorCode := 0;\r\n        osbErrorMessage := 1;\r\n        \r\n        dbms_output.enable( 1000000 );\r\n    \r\n        BEGIN\r\n            select  ''x''\r\n            into    sbExiste\r\n            from    all_tables\r\n            where   table_name = upper( csbTABLA )\r\n            and     owner = upper( csbOWNER )\r\n            ;\r\n        EXCEPTION\r\n            when NO_DATA_FOUND then\r\n                onuErrorCode := 101;\r\n                osbErrorMessage := ''La tabla no existe'';\r\n                dbms_output.put_line( ''La tabla no existe'' );\r\n                raise;\r\n        END;    \r\n        \r\n        gsbTableCap := upper( substr( csbTABLA, 1, 1 ) ) || lower( substr( csbTABLA, 2 ) );\r\n        \r\n        SELECT  USER usuario_exec\r\n        INTO    sbUser\r\n        FROM    dual;    \r\n        \r\n        if ( cuPrimaria%isopen ) then\r\n            close cuPrimaria;\r\n        end if;\r\n        open cuPrimaria;\r\n        fetch cuPrimaria bulk collect into tbPrimaria;\r\n        close cuPrimaria;\r\n        \r\n        if ( cuCampos%isopen ) then\r\n            close cuCampos;\r\n        end if;\r\n        open cuCampos;\r\n        fetch cuCampos bulk collect into tbCampos;\r\n        close cuCampos;\r\n        \r\n        --flArchivo := utl_file.fopen( csbRUTA_ARCHIVO, ''PKTBL'' || upper( csbTABLA ) || ''.sql'', ''w'', 32767 );\r\n        \r\n        DBMS_LOB.APPEND(oclFile,\r\n''CREATE OR REPLACE PACKAGE pktbl'' || gsbTableCap || ''\r\nIS\r\n/**************************************************************************\r\n    Copyright (c) 2020 EPM - Empresas Públicas de Medellín\r\n    Archivo generado automaticamente.\r\n    ''|| sbUser ||'' - MVM Ingeniería de Software S.A.S.\r\n            \r\n    Nombre      :   pktbl'' || gsbTableCap || ''\r\n    Descripción :   Paquete de primer nivel, para la tabla '' || upper( csbTABLA ) || ''\r\n    Autor       :   Generador automatico paquetes de primer nivel.\r\n    Fecha       :   '' || to_char( sysdate, ''dd/mm/yyyy'' ) || ''\r\n    WO          :   '' || csbWO || ''\r\n            \r\n    Historial de Modificaciones\r\n    ---------------------------------------------------------------------------\r\n    Fecha         Autor         Descripcion\r\n    =====         =======       ===============================================\r\n***************************************************************************/\r\n                \r\n    --------------------------------------------\r\n    --  Type and Subtypes\r\n    --------------------------------------------'');\r\n        \r\n        if( tbCampos.first is not null ) then            \r\n            DBMS_LOB.APPEND(oclFile, CHR(10)||''\r\n    -- Define colecciones de cada columna de la tabla '' || gsbTableCap);\r\n        \r\n            for i in tbCampos.first .. tbCampos.last loop            \r\n\r\n                    DBMS_LOB.APPEND(oclFile, ''\r\n    TYPE ty''||tbCampos( i ).column_name||'' IS TABLE OF ''||gsbTableCap||''.''||tbCampos( i ).column_name||''%TYPE INDEX BY BINARY_INTEGER;'');\r\n\r\n            end loop;\r\n        \r\n            DBMS_LOB.APPEND(oclFile, CHR(10)||''\r\n    -- Define registro de colecciones'');\r\n\r\n            DBMS_LOB.APPEND(oclFile,''\r\n    TYPE tytb''||gsbTableCap||'' IS RECORD\r\n    ('');\r\n        \r\n            for i in tbCampos.first .. tbCampos.last loop            \r\n                if ( i <> tbCampos.last ) then\r\n                    sbCadena := sbCadena ||''\r\n        ''||tbCampos( i ).column_name||''  ty''||tbCampos( i ).column_name||'','';\r\n                else\r\n                    sbCadena := sbCadena ||''\r\n        ''||tbCampos( i ).column_name||''  ty''||tbCampos( i ).column_name;\r\n                end if;\r\n            END loop;\r\n            \r\n            DBMS_LOB.APPEND(oclFile, sbCadena||''\r\n    );'');\r\n        end if;\r\n    \r\n    DBMS_LOB.APPEND(oclFile,''\r\n    --------------------------------------------\r\n    -- Constants\r\n    --------------------------------------------\r\n        \r\n    --------------------------------------------\r\n    -- Variables\r\n    --------------------------------------------'');\r\n        \r\n        \r\n        if( tbPrimaria.first is not null ) then\r\n            DBMS_LOB.APPEND(oclFile, CHR(10)||''\r\n    -- Cursor para accesar '' || gsbTableCap || ''\r\n    CURSOR cu'' || gsbTableCap || ''\r\n    ('');\r\n        \r\n            for i in tbPrimaria.first .. tbPrimaria.last loop\r\n                sbCadena := tbPrimaria( i ).param_entrada;\r\n                if ( i <> tbPrimaria.first ) then\r\n                    sbCadena := '',''||''\r\n        ''||sbCadena;\r\n                ELSE\r\n                    sbCadena := ''\r\n        ''||sbCadena;\r\n                end if;\r\n                DBMS_LOB.APPEND(oclFile,sbCadena);\r\n            end loop;\r\n            \r\n            DBMS_LOB.APPEND(oclFile,''\r\n    )\r\n    IS\r\n        SELECT  *\r\n        FROM    '' || lower( csbTABLA ));\r\n            \r\n            for i in tbPrimaria.first .. tbPrimaria.last loop\r\n                if ( i = tbPrimaria.first ) then\r\n                    sbCadena := ''\r\n        WHERE   '';\r\n                else\r\n                    sbCadena := ''\r\n        AND     '';\r\n                end if;\r\n            \r\n                sbCadena := sbCadena || lower( tbPrimaria( i ).column_name ) || '' = '' || tbPrimaria( i ).alias;\r\n                if ( i = tbPrimaria.last ) then\r\n                    sbCadena := sbCadena || '';'';\r\n                end if;\r\n                DBMS_LOB.APPEND(oclFile, sbCadena);\r\n            end loop;\r\n            \r\n        end if;\r\n        \r\n        DBMS_LOB.APPEND(oclFile, CHR(10)|| ''\r\n    --------------------------------------------\r\n    -- Funciones y Procedimientos\r\n    --------------------------------------------\r\n    -- Insertar un registro\r\n    PROCEDURE InsRecord\r\n    (\r\n        ircRecord in '' || lower( csbTABLA ) || ''%rowtype\r\n    );'');\r\n        \r\n        DBMS_LOB.APPEND(oclFile, CHR(10)|| ''\r\n    -- Insertar colección de registros\r\n    PROCEDURE InsRecords\r\n    (\r\n        irctbRecord  IN OUT NOCOPY   tytb''||gsbTableCap||''\r\n    );'');\r\n            \r\n        DBMS_LOB.APPEND(oclFile, CHR(10)|| ''\r\n    -- Insertar un record de tablas por columna\r\n    PROCEDURE InsForEachColumn\r\n    ('');\r\n        \r\n        for i in tbCampos.first .. tbCampos.last loop     \r\n            sbTipoDato := fsbTipoDato( tbCampos( i ).data_type );       \r\n            if ( i <> tbCampos.last ) then                              \r\n                DBMS_LOB.APPEND(oclFile, CHR(10)||          \r\n        ''       ''||sbTipoDato||tbCampos( i ).column_name||'' IN ''||lower( csbTABLA )||''.''||tbCampos( i ).column_name||''%TYPE,'');               \r\n            else\r\n                DBMS_LOB.APPEND(oclFile, CHR(10)||          \r\n        ''       ''||sbTipoDato||tbCampos( i ).column_name||'' IN ''||lower( csbTABLA )||''.''||tbCampos( i ).column_name||''%TYPE'');\r\n            end if;    \r\n        end loop;\r\n        \r\n        DBMS_LOB.APPEND(oclFile, CHR(10)||\r\n''    );'');\r\n        \r\n        DBMS_LOB.APPEND(oclFile, CHR(10)|| ''\r\n    -- Insertar un record de tablas por columna masivamente\r\n    PROCEDURE InsForEachColumnBulk\r\n    ('');\r\n        \r\n        for i in tbCampos.first .. tbCampos.last loop     \r\n            sbTipoDato := fsbTipoDato( tbCampos( i ).data_type , TRUE);       \r\n            if ( i <> tbCampos.last ) then                              \r\n                DBMS_LOB.APPEND(oclFile, CHR(10)||          \r\n        ''       ''||sbTipoDato||tbCampos( i ).column_name||'' IN OUT NOCOPY ty''||tbCampos( i ).column_name||'','');               \r\n            else\r\n                DBMS_LOB.APPEND(oclFile, CHR(10)||          \r\n        ''       ''||sbTipoDato||tbCampos( i ).column_name||'' IN OUT NOCOPY ty''||tbCampos( i ).column_name);\r\n            end if;    \r\n        end loop;\r\n        \r\n        DBMS_LOB.APPEND(oclFile, CHR(10)||\r\n''    );'');    \r\n            \r\n        if( tbPrimaria.first is not null ) then\r\n        \r\n            DBMS_LOB.APPEND(oclFile, CHR(10)|| ''\r\n    -- Limpiar la memoria\r\n    PROCEDURE ClearMemory;\r\n\r\n    -- Eliminar un registro\r\n    PROCEDURE DelRecord\r\n    ('');\r\n        \r\n            for i in tbPrimaria.first .. tbPrimaria.last loop\r\n                sbCadena := tbPrimaria( i ).param_entrada;\r\n                if ( i <> tbPrimaria.last ) then\r\n                    sbCadena := sbCadena || '','';\r\n                end if;\r\n                DBMS_LOB.APPEND(oclFile, CHR(10)|| ''        '' || sbCadena);\r\n            end loop;\r\n    \r\n            DBMS_LOB.APPEND(oclFile, CHR(10)||\r\n''    );\r\n\r\n    -- Actualizar un registro\r\n    PROCEDURE UpRecord\r\n    (\r\n        ircRecord in '' || lower( csbTABLA ) || ''%rowtype\r\n    );\r\n        \r\n    -- Eliminar un grupo de registros\r\n    PROCEDURE DelRecords\r\n    ('');\r\n            for i in tbPrimaria.first .. tbPrimaria.last loop\r\n                sbTipoDato := fsbTipoDato( tbPrimaria( i ).data_type, TRUE );\r\n                if ( i <> tbPrimaria.last ) then\r\n                    DBMS_LOB.APPEND(oclFile, CHR(10)|| ''        '' || sbTipoDato||tbPrimaria( i ).column_name || '' IN OUT NOCOPY ty''||tbPrimaria( i ).column_name||'','');\r\n                else\r\n                    DBMS_LOB.APPEND(oclFile, CHR(10)|| ''        '' || sbTipoDato||tbPrimaria( i ).column_name || '' IN OUT NOCOPY ty''||tbPrimaria( i ).column_name);\r\n                end if;\r\n            end loop;\r\n        DBMS_LOB.APPEND(oclFile, ''     \r\n    );\r\n                \r\n    -- Indica si el registro existe\r\n    FUNCTION fblExist\r\n    ('');\r\n        \r\n            for i in tbPrimaria.first .. tbPrimaria.last loop\r\n                DBMS_LOB.APPEND(oclFile, CHR(10)|| ''        '' || tbPrimaria( i ).param_entrada || '','');\r\n            end loop;\r\n            DBMS_LOB.APPEND(oclFile, CHR(10)|| ''        inuCACHE IN NUMBER DEFAULT 1\r\n    )\r\n    RETURN BOOLEAN;\r\n    \r\n    -- Obtiene registro\r\n    FUNCTION frcGetRecord\r\n    ('');\r\n        \r\n            for i in tbPrimaria.first .. tbPrimaria.last loop\r\n                DBMS_LOB.APPEND(oclFile, CHR(10)|| ''        '' || tbPrimaria( i ).param_entrada || '','');\r\n            end loop;\r\n            \r\n            DBMS_LOB.APPEND(oclFile, CHR(10)|| ''        inuCACHE IN NUMBER DEFAULT 1\r\n    )\r\n    RETURN '' || lower( csbTABLA ) || ''%ROWTYPE;\r\n    \r\n    -- Valida si existe un registro\r\n    PROCEDURE AccKey\r\n    ('');\r\n        \r\n        for i in tbPrimaria.first .. tbPrimaria.last loop\r\n            DBMS_LOB.APPEND(oclFile, CHR(10)|| ''        '' || tbPrimaria( i ).param_entrada || '','');\r\n        end loop;\r\n            \r\n        DBMS_LOB.APPEND(oclFile, CHR(10)|| ''        inuCACHE IN NUMBER DEFAULT 1\r\n    );\r\n    \r\n    -- Valida si está duplicad\r\n    PROCEDURE ValidateDupValues\r\n    ('');\r\n        \r\n        for i in tbPrimaria.first .. tbPrimaria.last loop\r\n            DBMS_LOB.APPEND(oclFile, CHR(10)|| ''        '' || tbPrimaria( i ).param_entrada || '','');\r\n        end loop;\r\n            \r\n        DBMS_LOB.APPEND(oclFile, CHR(10)|| ''        inuCACHE IN NUMBER DEFAULT 1\r\n    );\r\n    '');        \r\n    \r\n        /* Recorre los campos de la PK para armar la lista de campos y de parámetros */\r\n        FOR i IN tbPrimaria.first .. tbPrimaria.last LOOP\r\n\r\n            IF (i = tbPrimaria.first ) THEN\r\n\r\n                    IF (i = tbPrimaria.last) THEN\r\n                        sbParamPK := tbPrimaria( i ).param_entrada||'','';\r\n                        sbWherePorPK := tbPrimaria(i).column_name||'' = ''||tbPrimaria( i ).alias;\r\n                    ELSE\r\n                        \r\n                        sbWherePorPK := tbPrimaria(i).column_name||'' = ''||tbPrimaria( i ).alias||CHR(10)||''        '';\r\n                    \r\n                        sbParamPK := tbPrimaria( i ).param_entrada||'',\r\n        '';\r\n                    END IF;\r\n                    \r\n                    sbVariablesPK := tbPrimaria( i ).alias||'',\r\n        '';        \r\n                    sbCamposPKParaOutput := tbPrimaria( i ).alias;                    \r\n\r\n            ELSIF (i = tbPrimaria.last) THEN\r\n        \r\n                    sbParamPK := sbParamPK ||tbPrimaria( i ).param_entrada||'','';\r\n                    \r\n                    sbVariablesPK := sbVariablesPK ||tbPrimaria( i ).alias||'',\r\n        '';                \r\n                    sbCamposPKParaOutput := sbCamposPKParaOutput||''||'''' - ''''||''||tbPrimaria( i ).alias;\r\n                    \r\n                    sbWherePorPK := tbPrimaria(i).column_name||'' = ''||tbPrimaria( i ).alias;\r\n            \r\n            ELSE\r\n                    sbParamPK := sbParamPK ||tbPrimaria( i ).param_entrada||'',\r\n        '';                \r\n                    sbVariablesPK := sbVariablesPK ||tbPrimaria( i ).alias||'',\r\n        '';                \r\n                    sbCamposPKParaOutput := sbCamposPKParaOutput||''||'''' - ''''||''||tbPrimaria( i ).alias;\r\n                    \r\n                    sbWherePorPK := tbPrimaria(i).column_name||'' = ''||tbPrimaria( i ).alias||CHR(10)||''        '';\r\n        \r\n            END IF;\r\n                                \r\n        END LOOP;\r\n        \r\n        /* Prepara la variable para incrustarse en texto */\r\n        sbCamposPKParaOutputCom := CHR(39)||''||''||sbCamposPKParaOutput||''||''||CHR(39);\r\n        \r\n        /* Recorre los campos creando las funciones para obtener campos puntuales */\r\n        FOR i in tbCampos.FIRST .. tbCampos.LAST LOOP    \r\n\r\n            -- No crea método para obtener o actualizar pk\r\n            IF ( fboCampoEnPrimaryKey( tbPrimaria, tbCampos(i).column_name )) THEN\r\n                CONTINUE;\r\n            END IF;\r\n                     \r\n            -- Reemplaza el nombre de la tabla\r\n            sbFunction := REPLACE(csbSpecTemplateFunction, ''<Tabla>'', Initcap(csbTABLA));                    \r\n                            \r\n            -- Reemplaza el nombre del campo\r\n            sbFunction := REPLACE(sbFunction, ''<Campo>'', Initcap(tbCampos(i).column_name));\r\n                            \r\n            -- Reemplazan parámetros de entrada que son campos de la PK\r\n            sbFunction := REPLACE(sbFunction, ''<ParamPK>'', sbParamPK);\r\n\r\n            -- Reemplaza el tipo de función según el tipo de dato\r\n            sbFunction := REPLACE(sbFunction, ''<Type>'', fsbTipoDato(tbCampos(i).data_type , FALSE, TRUE) );\r\n\r\n            -- Escribe la función\r\n            DBMS_LOB.APPEND(oclFile, sbFunction);\r\n\r\n        END LOOP;\r\n        \r\n        /* Recorre los campos creando las funciones para obtener campos puntuales */\r\n        FOR i in tbCampos.FIRST .. tbCampos.LAST LOOP    \r\n\r\n            -- No crea método para obtener o actualizar pk\r\n            IF ( fboCampoEnPrimaryKey( tbPrimaria, tbCampos(i).column_name )) THEN\r\n                CONTINUE;\r\n            END IF;\r\n                       \r\n            -- Reemplaza el nombre de la tabla\r\n            sbFunction := REPLACE(csbSpecTemplateProc, ''<Campo>'', Initcap(tbCampos(i).column_name) );                    \r\n                            \r\n            -- Reemplazan parámetros de entrada que son campos de la PK\r\n            sbFunction := REPLACE(sbFunction, ''<ParamPK>'', sbParamPK);\r\n\r\n            -- Reemplaza el parámetro de entrada el campo\r\n            sbFunction := REPLACE(sbFunction, ''<ParamCampo>'', tbCampos(i).param_entrada );\r\n\r\n            -- Escribe la función\r\n            DBMS_LOB.APPEND(oclFile, sbFunction);\r\n\r\n        END LOOP;        \r\n    \r\n        end if; -- Si tiene PK\r\n        \r\n        DBMS_LOB.APPEND(oclFile, CHR(10)||CHR(10)||''END pktbl'' || gsbTableCap || '';''||CHR(10)||''/''||CHR(10)||''CREATE OR REPLACE PACKAGE BODY pktbl'' || gsbTableCap || ''\r\nIS    \r\n    -------------------------\r\n    --  PRIVATE VARIABLES\r\n    -------------------------'');\r\n        \r\n        if( tbPrimaria.first is not null ) then\r\n            DBMS_LOB.APPEND(oclFile, CHR(10)||''\r\n    -- Record Tabla '' || upper( csbTABLA ) || ''\r\n    rc'' || gsbTableCap || '' cu'' || gsbTableCap || ''%ROWTYPE;\r\n    \r\n    -- Record nulo de la Tabla '' || upper( csbTABLA ) || ''\r\n    rcRecordNull '' || lower( csbTABLA ) || ''%ROWTYPE;\r\n        \r\n    -------------------------\r\n    --   PRIVATE METHODS   \r\n    -------------------------\r\n        \r\n    PROCEDURE Load\r\n    ('');\r\n        \r\n        for i in tbPrimaria.first .. tbPrimaria.last loop\r\n            sbCadena := tbPrimaria( i ).param_entrada;\r\n            if ( i <> tbPrimaria.last ) then\r\n                sbCadena := sbCadena || '','';\r\n            end if;\r\n            DBMS_LOB.APPEND(oclFile, CHR(10)|| ''        '' || sbCadena);\r\n        end loop;\r\n        DBMS_LOB.APPEND(oclFile, ''\r\n    );\r\n        \r\n    PROCEDURE LoadRecord\r\n    ('');\r\n        \r\n        for i in tbPrimaria.first .. tbPrimaria.last loop\r\n            sbCadena := tbPrimaria( i ).param_entrada;\r\n            if ( i <> tbPrimaria.last ) then\r\n                sbCadena := sbCadena || '','';\r\n            end if;\r\n            DBMS_LOB.APPEND(oclFile, CHR(10)|| ''        '' || sbCadena);\r\n        end loop;\r\n        DBMS_LOB.APPEND(oclFile,''\r\n    );\r\n        \r\n    FUNCTION fblInMemory\r\n    ('');\r\n        \r\n        for i in tbPrimaria.first .. tbPrimaria.last loop\r\n            sbCadena := tbPrimaria( i ).param_entrada;\r\n            if ( i <> tbPrimaria.last ) then\r\n                sbCadena := sbCadena || '','';\r\n            end if;\r\n            DBMS_LOB.APPEND(oclFile, CHR(10)|| ''        '' || sbCadena);\r\n        end loop;\r\n        DBMS_LOB.APPEND(oclFile, ''\r\n    )\r\n    RETURN BOOLEAN;'');\r\n        \r\n        end if;\r\n        \r\n        DBMS_LOB.APPEND(oclFile, CHR(10)|| ''\r\n    -----------------\r\n    -- CONSTANTES\r\n    -----------------\r\n    CACHE                      CONSTANT NUMBER := 1;   -- Buscar en Cache\r\n    \r\n    -------------------------\r\n    --  PRIVATE CONSTANTS\r\n    -------------------------\r\n    cnuRECORD_NO_EXISTE        CONSTANT NUMBER := '' || csbNO_EXISTE || ''; -- Reg. no esta en BD\r\n    cnuRECORD_YA_EXISTE        CONSTANT NUMBER := '' || csbEXISTE || ''; -- Reg. ya esta en BD    \r\n    -- Division\r\n    csbDIVISION                CONSTANT VARCHAR2(20) := pkConstante.csbDIVISION;\r\n    -- Modulo\r\n    csbMODULE                  CONSTANT VARCHAR2(20) := pkConstante.csbMOD_CUZ;\r\n    -- Texto adicionar para mensaje de error\r\n    csbTABLA_PK                CONSTANT VARCHAR2(200):= ''''(Tabla ''||upper( csbTABLA )||'') ( PK ['''';\r\n    csb_TABLA                  CONSTANT VARCHAR2(200):= ''''(Tabla ''||upper( csbTABLA )||'')'''';'');\r\n\r\n        \r\n        if( tbPrimaria.first is not null ) then\r\n            DBMS_LOB.APPEND(oclFile, CHR(10)|| ''\r\n    -- Carga\r\n    PROCEDURE Load\r\n    ('');\r\n        \r\n        for i in tbPrimaria.first .. tbPrimaria.last loop\r\n            sbCadena := tbPrimaria( i ).param_entrada;\r\n            if ( i <> tbPrimaria.last ) then\r\n                sbCadena := sbCadena || '','';\r\n            end if;\r\n            DBMS_LOB.APPEND(oclFile, CHR(10)|| ''        '' || sbCadena);\r\n        end loop;\r\n        DBMS_LOB.APPEND(oclFile, CHR(10)|| ''    )\r\n    IS\r\n    BEGIN\r\n        pkErrors.Push( ''''pktbl'' || gsbTableCap || ''.Load'''' );\r\n        LoadRecord\r\n        ('');\r\n            \r\n        for i in tbPrimaria.first .. tbPrimaria.last loop\r\n            sbCadena := tbPrimaria( i ).alias;\r\n            if ( i <> tbPrimaria.last ) then\r\n                sbCadena := sbCadena || '','';\r\n            end if;\r\n            DBMS_LOB.APPEND(oclFile, CHR(10)|| ''            '' || sbCadena);\r\n        end loop;\r\n            \r\n        DBMS_LOB.APPEND(oclFile, CHR(10)|| ''        );\r\n        -- Evalúa si se encontro el registro en la Base de datos\r\n        IF ( rc'' || gsbTableCap || ''.'' || lower( tbPrimaria( tbPrimaria.first ).column_name ) || '' IS NULL ) THEN\r\n            pkErrors.Pop;\r\n            RAISE NO_DATA_FOUND;\r\n        END IF;\r\n        pkErrors.Pop;\r\n    EXCEPTION\r\n        WHEN NO_DATA_FOUND THEN\r\n            pkErrors.SetErrorCode( csbDIVISION, csbMODULE, cnuRECORD_NO_EXISTE );\r\n            pkErrors.ADDSUFFIXTOMESSAGE ( csbTABLA_PK||''||sbCamposPKParaOutput||''||''''] )''||CHR(39)||'');\r\n            pkErrors.Pop;\r\n            RAISE LOGIN_DENIED;\r\n    END Load;\r\n    \r\n    -- Carga    \r\n    PROCEDURE LoadRecord\r\n    ('');\r\n        \r\n        for i in tbPrimaria.first .. tbPrimaria.last loop\r\n            sbCadena := tbPrimaria( i ).param_entrada;\r\n            if ( i <> tbPrimaria.last ) then\r\n                sbCadena := sbCadena || '','';\r\n            end if;\r\n            DBMS_LOB.APPEND(oclFile, CHR(10)|| ''        '' || sbCadena);\r\n        end loop;\r\n        DBMS_LOB.APPEND(oclFile, CHR(10)|| ''    )\r\n    IS\r\n    BEGIN\r\n        pkErrors.Push( ''''pktbl'' || gsbTableCap || ''.LoadRecord'''' );     \r\n        IF ( cu'' || gsbTableCap || ''%ISOPEN ) THEN\r\n            CLOSE cu'' || gsbTableCap || '';\r\n        END IF;\r\n        -- Accesa '' || upper( csbTABLA ) || '' de la BD\r\n        OPEN cu'' || gsbTableCap || ''\r\n        ('');\r\n        for i in tbPrimaria.first .. tbPrimaria.last loop\r\n            sbCadena := tbPrimaria( i ).alias;\r\n            if ( i <> tbPrimaria.last ) then\r\n                sbCadena := sbCadena || '','';\r\n            end if;\r\n            DBMS_LOB.APPEND(oclFile, CHR(10)|| ''            '' || sbCadena);\r\n        end loop;\r\n            \r\n        DBMS_LOB.APPEND(oclFile, CHR(10)|| ''        );\r\n        FETCH cu'' || gsbTableCap || '' INTO rc'' || gsbTableCap || '';\r\n        IF ( cu'' || gsbTableCap || ''%NOTFOUND ) then\r\n            rc'' || gsbTableCap || '' := rcRecordNull;\r\n        END IF;\r\n        CLOSE cu'' || gsbTableCap || '';\r\n        pkErrors.Pop;\r\n    \r\n    END LoadRecord;    \r\n    \r\n    -- Indica si está en memoria  \r\n    FUNCTION fblInMemory\r\n    ('');\r\n        \r\n        for i in tbPrimaria.first .. tbPrimaria.last loop\r\n            sbCadena := tbPrimaria( i ).param_entrada;\r\n            if ( i <> tbPrimaria.last ) then\r\n                sbCadena := sbCadena || '','';\r\n            end if;\r\n            DBMS_LOB.APPEND(oclFile, CHR(10)|| ''        '' || sbCadena);\r\n        end loop;\r\n        DBMS_LOB.APPEND(oclFile, CHR(10)|| ''    )\r\n    RETURN BOOLEAN\r\n    IS\r\n    BEGIN\r\n        pkErrors.Push( ''''pktbl'' || gsbTableCap || ''.fblInMemory'''' );\r\n        '');\r\n            \r\n        sbCadena := ''\r\n        IF ( '';\r\n            \r\n        for i in tbPrimaria.first .. tbPrimaria.last loop\r\n            sbCadena := sbCadena || ''rc'' || gsbTableCap || ''.'' || lower( tbPrimaria( i ).column_name ) || '' = '' || tbPrimaria( i ).alias;\r\n            if ( i <> tbPrimaria.first) then\r\n                sbCadena := ''\r\n            AND ''||sbCadena;\r\n            END if;\r\n            DBMS_LOB.APPEND(oclFile, sbCadena);\r\n            sbCadena := NULL;\r\n        end loop;\r\n        sbCadena := '' ) THEN'';\r\n        DBMS_LOB.APPEND(oclFile,sbCadena ||''\r\n            pkErrors.Pop;\r\n            RETURN( TRUE );\r\n        END IF;\r\n        pkErrors.Pop;\r\n        RETURN( FALSE );\r\n    \r\n    END fblInMemory;\r\n    \r\n    -- Valida si existe registro\r\n    PROCEDURE AccKey\r\n    ('');\r\n        \r\n        for i in tbPrimaria.first .. tbPrimaria.last loop\r\n            DBMS_LOB.APPEND(oclFile, CHR(10)|| ''        '' || tbPrimaria( i ).param_entrada || '','');\r\n        end loop;\r\n            \r\n        DBMS_LOB.APPEND(oclFile, CHR(10)|| ''        inuCACHE IN NUMBER DEFAULT 1\r\n    )\r\n    IS\r\n    BEGIN\r\n        pkErrors.Push( ''''pktbl'' || gsbTableCap || ''.AccKey'''' );\r\n            \r\n        --Valida si debe buscar primero en memoria Cache\r\n        IF NOT (inuCACHE = CACHE AND fblInMemory('');\r\n            \r\n        for i in tbPrimaria.first .. tbPrimaria.last loop\r\n            sbCadena := tbPrimaria( i ).alias;\r\n            if ( i <> tbPrimaria.first ) then\r\n                sbCadena := '', ''||sbCadena;\r\n            end if;\r\n            DBMS_LOB.APPEND(oclFile, sbCadena);\r\n        end loop;\r\n            \r\n        DBMS_LOB.APPEND(oclFile, '') ) THEN\r\n        \r\n            Load\r\n            ('');\r\n                \r\n            for i in tbPrimaria.first .. tbPrimaria.last loop\r\n                sbCadena := tbPrimaria( i ).alias;\r\n                if ( i <> tbPrimaria.last ) then\r\n                    sbCadena := sbCadena || '','';\r\n                end if;\r\n                DBMS_LOB.APPEND(oclFile, CHR(10)|| ''                '' || sbCadena);\r\n            end loop;\r\n                \r\n            DBMS_LOB.APPEND(oclFile, CHR(10)|| ''            );\r\n        END IF;\r\n        pkErrors.Pop;\r\n    EXCEPTION\r\n        WHEN LOGIN_DENIED THEN\r\n            pkErrors.Pop;\r\n            RAISE LOGIN_DENIED;\r\n    END AccKey;\r\n    \r\n    -- Limpia memoria\r\n    PROCEDURE ClearMemory \r\n    IS\r\n    BEGIN\r\n        pkErrors.Push( ''''pktbl'' || gsbTableCap || ''.ClearMemory'''' );\r\n        rc'' || gsbTableCap || '' := rcRecordNull;\r\n        pkErrors.Pop;\r\n    END ClearMemory;\r\n    \r\n    -- Elimina registro    \r\n    PROCEDURE DelRecord\r\n    ('');\r\n        \r\n        for i in tbPrimaria.first .. tbPrimaria.last loop\r\n            sbCadena := tbPrimaria( i ).param_entrada;\r\n            if ( i <> tbPrimaria.last ) then\r\n                sbCadena := sbCadena || '','';\r\n            end if;\r\n            DBMS_LOB.APPEND(oclFile, CHR(10)|| ''        '' || sbCadena);\r\n        end loop;\r\n        DBMS_LOB.APPEND(oclFile, CHR(10)|| ''    )\r\n    IS\r\n    BEGIN\r\n        pkErrors.Push( ''''pktbl'' || gsbTableCap || ''.DelRecord'''' );\r\n            \r\n        --Elimina registro de la Tabla '' || upper( csbTABLA ) || ''\r\n        DELETE  '' || lower( csbTABLA ));\r\n            \r\n        for i in tbPrimaria.first .. tbPrimaria.last loop\r\n            if ( i = tbPrimaria.first ) then\r\n                sbCadena := ''WHERE   '';\r\n            else\r\n                sbCadena := ''AND     '';    \r\n            end if;\r\n            \r\n            sbCadena := sbCadena || lower( tbPrimaria( i ).column_name ) || '' = '' || tbPrimaria( i ).alias;\r\n            if ( i = tbPrimaria.last ) then\r\n                sbCadena := sbCadena || '';'';\r\n            end if;\r\n            DBMS_LOB.APPEND(oclFile, CHR(10)|| ''        '' || sbCadena);\r\n        end loop;\r\n            \r\n        DBMS_LOB.APPEND(oclFile, CHR(10)|| ''\r\n        IF ( sql%NOTFOUND ) THEN\r\n            pkErrors.Pop;\r\n            RAISE NO_DATA_FOUND;\r\n        END IF;\r\n        pkErrors.Pop;\r\n            \r\n        EXCEPTION\r\n            WHEN NO_DATA_FOUND THEN\r\n                pkErrors.SetErrorCode( csbDIVISION, csbMODULE, cnuRECORD_NO_EXISTE );\r\n                pkErrors.ADDSUFFIXTOMESSAGE ( csbTABLA_PK||''||sbCamposPKParaOutput||''||''''] )''||CHR(39)||'');\r\n                pkErrors.Pop;\r\n                RAISE LOGIN_DENIED;\r\n    END DelRecord;'');\r\n        \r\n        DBMS_LOB.APPEND(oclFile, CHR(10)|| ''    \r\n    -- Elimina registros\r\n    PROCEDURE DelRecords\r\n    ('');\r\n        for i in tbPrimaria.first .. tbPrimaria.last loop\r\n            sbTipoDato := fsbTipoDato( tbPrimaria( i ).data_type, TRUE );\r\n            if ( i <> tbPrimaria.last ) then\r\n                DBMS_LOB.APPEND(oclFile, CHR(10)|| ''        '' || sbTipoDato||tbPrimaria( i ).column_name || '' IN OUT NOCOPY ty''||tbPrimaria( i ).column_name||'','');\r\n            else\r\n                DBMS_LOB.APPEND(oclFile, CHR(10)|| ''        '' || sbTipoDato||tbPrimaria( i ).column_name || '' IN OUT NOCOPY ty''||tbPrimaria( i ).column_name);\r\n            end if;\r\n        end loop;\r\n    DBMS_LOB.APPEND(oclFile,''\r\n    )\r\n    IS\r\n    BEGIN\r\n        pkErrors.Push( ''''pktbl'' || gsbTableCap || ''.DelRecords'''' );\r\n            \r\n        -- Elimina registros de la Tabla ''||lower( csbTABLA ));\r\n            \r\n        for i in tbPrimaria.first .. tbPrimaria.last loop\r\n            sbTipoDato := fsbTipoDato( tbPrimaria( i ).data_type, TRUE );\r\n            if ( i = tbPrimaria.first ) then\r\n                DBMS_LOB.APPEND(oclFile, CHR(10)|| \r\n        ''        FORALL indx IN ''||sbTipoDato||tbPrimaria( i ).column_name||''.FIRST .. ''||sbTipoDato||tbPrimaria( i ).column_name||''.LAST'');\r\n                DBMS_LOB.APPEND(oclFile, CHR(10)|| \r\n        ''        DELETE ''||tbPrimaria( i ).table_name||'' WHERE ''||tbPrimaria( i ).column_name||'' = ''||sbTipoDato||tbPrimaria( i ).column_name||''(indx)'');\r\n            elsif ( i <> tbPrimaria.last ) then\r\n                DBMS_LOB.APPEND(oclFile, CHR(10)|| \r\n        ''        AND ''||tbPrimaria( i ).column_name||'' = ''||sbTipoDato||tbPrimaria( i ).column_name||''(indx)'');\r\n            else\r\n                DBMS_LOB.APPEND(oclFile, CHR(10)|| \r\n        ''        AND ''||tbPrimaria( i ).column_name||'' = ''||sbTipoDato||tbPrimaria( i ).column_name||''(indx)'');\r\n            end if;            \r\n        end loop;\r\n        DBMS_LOB.APPEND(oclFile,'';'');\r\n            \r\n            DBMS_LOB.APPEND(oclFile, CHR(10)|| \r\n        ''\r\n        IF ( SQL%NOTFOUND ) THEN\r\n            pkErrors.Pop;\r\n            RAISE NO_DATA_FOUND;\r\n        END IF;\r\n            \r\n        pkErrors.Pop;\r\n    EXCEPTION\r\n        WHEN NO_DATA_FOUND THEN\r\n            pkErrors.SetErrorCode( csbDIVISION, csbMODULE, cnuRECORD_NO_EXISTE );   \r\n            pkErrors.ADDSUFFIXTOMESSAGE ( csb_TABLA );\r\n            pkErrors.Pop;\r\n            RAISE LOGIN_DENIED;\r\n    END DelRecords;'');\r\n        \r\n        end if;\r\n        \r\n        \r\n        DBMS_LOB.APPEND(oclFile, CHR(10)|| ''    \r\n    -- Inserta registro por columna\r\n    PROCEDURE InsForEachColumn\r\n    ('');\r\n        \r\n    for i in tbCampos.first .. tbCampos.last loop     \r\n        sbTipoDato := fsbTipoDato( tbCampos( i ).data_type );       \r\n        if ( i <> tbCampos.last ) then                              \r\n            DBMS_LOB.APPEND(oclFile, CHR(10)||          \r\n    ''       ''||sbTipoDato||tbCampos( i ).column_name||'' IN ''||lower( csbTABLA )||''.''||tbCampos( i ).column_name||''%TYPE,'');               \r\n        else\r\n            DBMS_LOB.APPEND(oclFile, CHR(10)||          \r\n    ''       ''||sbTipoDato||tbCampos( i ).column_name||'' IN ''||lower( csbTABLA )||''.''||tbCampos( i ).column_name||''%TYPE'');\r\n        end if;    \r\n    end loop;\r\n        \r\n    DBMS_LOB.APPEND(oclFile, CHR(10)|| ''\r\n    )\r\n    IS\r\n      rcRecord '' || lower( csbTABLA ) || ''%ROWTYPE;   -- Record de la Tabla ''||lower( csbTABLA )||''\r\n    BEGIN\r\n       pkErrors.Push( ''''pktbl''||lower( csbTABLA )||''.InsForEachColumn '''');'');\r\n           \r\n    for i in tbCampos.first .. tbCampos.last loop     \r\n        sbTipoDato := fsbTipoDato( tbCampos( i ).data_type );  \r\n        --rcRecord.crapcodi := inuCrapcodi;     \r\n        if ( i <> tbCampos.last ) then                              \r\n            DBMS_LOB.APPEND(oclFile, CHR(10)||          \r\n    ''       rcRecord.''||tbCampos( i ).column_name||'' := ''||sbTipoDato||tbCampos( i ).column_name||'';'');               \r\n        else\r\n            DBMS_LOB.APPEND(oclFile, CHR(10)||          \r\n    ''       rcRecord.''||tbCampos( i ).column_name||'' := ''||sbTipoDato||tbCampos( i ).column_name||'';'');\r\n        end if;    \r\n    end loop;\r\n        \r\n    DBMS_LOB.APPEND(oclFile, CHR(10)|| ''\r\n       InsRecord( rcRecord );\r\n       pkErrors.Pop;\r\n    EXCEPTION\r\n        WHEN LOGIN_DENIED THEN\r\n            pkErrors.Pop;\r\n            RAISE LOGIN_DENIED;\r\n    END InsForEachColumn;'');\r\n        \r\n        \r\n        DBMS_LOB.APPEND(oclFile, CHR(10)|| ''    \r\n    -- Inserta registro de tablas por campo masivamente\r\n    PROCEDURE InsForEachColumnBulk\r\n    ('');\r\n        \r\n    for i in tbCampos.first .. tbCampos.last loop     \r\n        sbTipoDato := fsbTipoDato( tbCampos( i ).data_type, TRUE );       \r\n        if ( i <> tbCampos.last ) then                              \r\n            DBMS_LOB.APPEND(oclFile, CHR(10)||          \r\n    ''       ''||sbTipoDato||tbCampos( i ).column_name||'' IN OUT NOCOPY ty''||tbCampos( i ).column_name||'','');               \r\n        else\r\n            DBMS_LOB.APPEND(oclFile, CHR(10)||          \r\n    ''       ''||sbTipoDato||tbCampos( i ).column_name||'' IN OUT NOCOPY ty''||tbCampos( i ).column_name);\r\n        end if;    \r\n    end loop;\r\n        \r\n    DBMS_LOB.APPEND(oclFile,''\r\n    )\r\n    IS      \r\n    BEGIN\r\n        pkErrors.Push('''' pktbl''||lower( csbTABLA )||''.InsForEachColumnBulk '''');'');\r\n           \r\n       for i in tbCampos.first .. tbCampos.last loop\r\n            sbTipoDato := fsbTipoDato( tbCampos( i ).data_type , TRUE);\r\n            if ( i = tbCampos.first ) THEN\r\n                \r\n                DBMS_LOB.APPEND(oclFile, CHR(10)||''\r\n        FORALL indx in ''||sbTipoDato||tbCampos( i ).column_name||''.FIRST .. ''||sbTipoDato||tbCampos( i ).column_name||''.LAST'');\r\n                DBMS_LOB.APPEND(oclFile,''\r\n        INSERT INTO ''||lower( csbTABLA )||''\r\n        ('');\r\n                DBMS_LOB.APPEND(oclFile,'' \r\n            ''||tbCampos( i ).column_name||'','');\r\n        \r\n            elsif ( i <> tbCampos.last ) then\r\n                DBMS_LOB.APPEND(oclFile,'' \r\n            ''||tbCampos( i ).column_name||'','');\r\n        \r\n            else\r\n                DBMS_LOB.APPEND(oclFile,'' \r\n            ''||tbCampos( i ).column_name||''\r\n        )\r\n        VALUES \r\n        ('');\r\n        \r\n            end if;            \r\n        end loop;\r\n            \r\n        for i in tbCampos.first .. tbCampos.last loop\r\n            sbTipoDato := fsbTipoDato( tbCampos( i ).data_type, TRUE );\r\n            if ( i <> tbCampos.last ) THEN\r\n                DBMS_LOB.APPEND(oclFile,''\r\n            ''||sbTipoDato||tbCampos( i ).column_name||''(indx),'');\r\n            ELSE\r\n                DBMS_LOB.APPEND(oclFile,''\r\n            ''||sbTipoDato||tbCampos( i ).column_name||''(indx)'');\r\n            END if;\r\n        END loop;\r\n        \r\n        DBMS_LOB.APPEND(oclFile,''\r\n        );'');\r\n           \r\n    DBMS_LOB.APPEND(oclFile, CHR(10)|| ''\r\n       pkErrors.Pop;\r\n    EXCEPTION\r\n        WHEN DUP_VAL_ON_INDEX THEN\r\n            pkErrors.SetErrorCode( csbDIVISION, csbMODULE, cnuRECORD_YA_EXISTE );\r\n            pkErrors.ADDSUFFIXTOMESSAGE ( csb_TABLA );\r\n            pkErrors.Pop;\r\n            RAISE LOGIN_DENIED;\r\n    END InsForEachColumnBulk;'');\r\n        \r\n        \r\n        DBMS_LOB.APPEND(oclFile, CHR(10)|| ''    \r\n    -- Inserta un registro\r\n    PROCEDURE InsRecord\r\n    (\r\n        ircRecord in '' || lower( csbTABLA ) || ''%ROWTYPE\r\n    )\r\n    IS\r\n    BEGIN\r\n        pkErrors.Push( ''''pktbl'' || gsbTableCap || ''.InsRecord'''' );\r\n            \r\n        INSERT INTO '' || lower( csbTABLA ) || ''\r\n        ('');\r\n            \r\n    for i in tbCampos.first .. tbCampos.last loop\r\n            \r\n        sbCadena := tbCampos( i ).alias;\r\n            \r\n        if ( i <> tbCampos.last ) then\r\n            sbCadena := sbCadena || '','';\r\n        end if;\r\n        DBMS_LOB.APPEND(oclFile, CHR(10)|| ''            '' || sbCadena);\r\n    end loop;\r\n            \r\n    DBMS_LOB.APPEND(oclFile, CHR(10)|| ''        ) \r\n        VALUES \r\n        ('');\r\n        \r\n    for i in tbCampos.first .. tbCampos.last loop\r\n            \r\n        sbCadena := ''ircRecord.'' || tbCampos( i ).alias;\r\n            \r\n        if ( i <> tbCampos.last ) then\r\n            sbCadena := sbCadena || '','';\r\n        end if;\r\n        DBMS_LOB.APPEND(oclFile, CHR(10)|| ''            '' || sbCadena);\r\n    end loop;\r\n    DBMS_LOB.APPEND(oclFile, CHR(10)|| ''        );\r\n        \r\n        pkErrors.Pop;\r\n    \r\n    EXCEPTION\r\n        WHEN DUP_VAL_ON_INDEX THEN\r\n            pkErrors.SetErrorCode( csbDIVISION, csbMODULE, cnuRECORD_YA_EXISTE );\r\n            pkErrors.ADDSUFFIXTOMESSAGE ( csb_TABLA );\r\n            pkErrors.Pop;\r\n            RAISE LOGIN_DENIED;\r\n    END InsRecord;'');\r\n        \r\n        \r\n        DBMS_LOB.APPEND(oclFile, CHR(10)|| ''    \r\n    -- Inserta tabla de registros\r\n    PROCEDURE InsRecords\r\n    (\r\n        irctbRecord  IN OUT NOCOPY   tytb''||csbTABLA||\r\n    ''\r\n    )\r\n    IS      \r\n    BEGIN\r\n        pkErrors.Push('''' pktbl''||lower( csbTABLA )||''.InsRecords'''' );'');\r\n           \r\n       for i in tbCampos.first .. tbCampos.last loop\r\n            sbTipoDato := fsbTipoDato( tbCampos( i ).data_type );\r\n            if ( i = tbCampos.first ) then\r\n                DBMS_LOB.APPEND(oclFile,''\r\n        FORALL indx IN irctbRecord.''||tbCampos( i ).column_name||''.FIRST .. irctbRecord.''||tbCampos( i ).column_name||''.LAST'');\r\n                DBMS_LOB.APPEND(oclFile, ''\r\n        INSERT INTO ''||lower( csbTABLA )||''\r\n        ('');\r\n                DBMS_LOB.APPEND(oclFile,''\r\n            ''||tbCampos( i ).column_name||'','');\r\n            elsif ( i <> tbCampos.last ) then\r\n                DBMS_LOB.APPEND(oclFile,'' \r\n            ''||tbCampos( i ).column_name||'','');\r\n            else\r\n                DBMS_LOB.APPEND(oclFile,'' \r\n            ''||tbCampos( i ).column_name||''\r\n         )\r\n         VALUES \r\n         ('');\r\n            end if;            \r\n        end loop;\r\n            \r\n        for i in tbCampos.first .. tbCampos.last loop\r\n            sbTipoDato := fsbTipoDato( tbCampos( i ).data_type );\r\n            if ( i <> tbCampos.last ) then\r\n                DBMS_LOB.APPEND(oclFile,''\r\n            irctbRecord.''||tbCampos( i ).column_name||''(indx),'');\r\n            else\r\n                DBMS_LOB.APPEND(oclFile,''\r\n            irctbRecord.''||tbCampos( i ).column_name||''(indx)'');\r\n            end if;            \r\n        end loop;\r\n            \r\n        DBMS_LOB.APPEND(oclFile,''\r\n        );'');\r\n           \r\n    DBMS_LOB.APPEND(oclFile, CHR(10)|| ''\r\n        pkErrors.Pop;\r\n    EXCEPTION\r\n        WHEN DUP_VAL_ON_INDEX THEN\r\n            pkErrors.SetErrorCode( csbDIVISION, csbMODULE, cnuRECORD_YA_EXISTE );\r\n            pkErrors.ADDSUFFIXTOMESSAGE ( csb_TABLA );\r\n            pkErrors.Pop;\r\n            RAISE LOGIN_DENIED;\r\n    END InsRecords;'');\r\n        \r\n        \r\n        if( tbPrimaria.first is not null ) then\r\n        \r\n            DBMS_LOB.APPEND(oclFile, CHR(10)|| ''    \r\n    -- Actualiza registro\r\n    PROCEDURE UpRecord\r\n    (\r\n        ircRecord IN '' || lower( csbTABLA ) || ''%ROWTYPE\r\n    )\r\n    IS\r\n    BEGIN\r\n        pkErrors.Push( ''''pktbl'' || gsbTableCap || ''.UpRecord'''' );\r\n            \r\n        UPDATE  '' || lower( csbTABLA ));\r\n            \r\n        for i in tbCampos.first .. tbCampos.last loop\r\n            \r\n            if ( i = tbCampos.first ) then\r\n                sbCadena := ''        SET     '' || tbCampos( i ).alias || '' = ircRecord.'' || tbCampos( i ).alias;\r\n            else\r\n                sbCadena := ''                '' || tbCampos( i ).alias || '' = ircRecord.'' || tbCampos( i ).alias;\r\n            end if;\r\n    \r\n                   \r\n            if ( i <> tbCampos.last ) then\r\n                sbCadena := sbCadena || '','';\r\n            end if;\r\n            DBMS_LOB.APPEND(oclFile, CHR(10)|| sbCadena);\r\n        end loop;\r\n            \r\n        for i in tbPrimaria.first .. tbPrimaria.last loop\r\n            if ( i = tbPrimaria.first ) then\r\n                sbCadena := ''WHERE   '';\r\n            else\r\n                sbCadena := ''AND     '';    \r\n            end if;\r\n            \r\n            sbCadena := sbCadena || lower( tbPrimaria( i ).column_name ) || '' = ircRecord.'' || lower( tbPrimaria( i ).column_name );\r\n            if ( i = tbPrimaria.last ) then\r\n                sbCadena := sbCadena || '';'';\r\n            end if;\r\n            DBMS_LOB.APPEND(oclFile, CHR(10)|| ''        '' || sbCadena);\r\n        end loop;\r\n            \r\n        DBMS_LOB.APPEND(oclFile, CHR(10)|| ''\r\n        IF ( SQL%NOTFOUND ) THEN\r\n            pkErrors.Pop;\r\n            RAISE NO_DATA_FOUND;\r\n        END IF;\r\n            \r\n        pkErrors.Pop;\r\n    \r\n    EXCEPTION\r\n        WHEN DUP_VAL_ON_INDEX THEN\r\n            pkErrors.SetErrorCode( csbDIVISION, csbMODULE, cnuRECORD_YA_EXISTE );\r\n            pkErrors.ADDSUFFIXTOMESSAGE ( csb_TABLA );\r\n            pkErrors.Pop;\r\n            RAISE LOGIN_DENIED;\r\n        WHEN NO_DATA_FOUND THEN\r\n            pkErrors.SetErrorCode( csbDIVISION, csbMODULE, cnuRECORD_NO_EXISTE );\r\n            pkErrors.ADDSUFFIXTOMESSAGE ( csb_TABLA );\r\n            pkErrors.Pop;\r\n            RAISE LOGIN_DENIED;\r\n    END UpRecord;\r\n    \r\n    -- Valida duplicados\r\n    PROCEDURE ValidateDupValues\r\n    ('');\r\n        \r\n        for i in tbPrimaria.first .. tbPrimaria.last loop\r\n            DBMS_LOB.APPEND(oclFile, CHR(10)|| ''        '' || tbPrimaria( i ).param_entrada || '','');\r\n        end loop;\r\n            \r\n        DBMS_LOB.APPEND(oclFile,''\r\n        inuCACHE    IN NUMBER DEFAULT 1\r\n    )\r\n    IS\r\n    BEGIN\r\n        pkErrors.Push( ''''pktbl'' || gsbTableCap || ''.ValidateDupValues'''' );\r\n            \r\n        --Valida si el registro ya existe\r\n        IF ( fblExist( '');\r\n            \r\n        for i in tbPrimaria.first .. tbPrimaria.last loop\r\n            DBMS_LOB.APPEND(oclFile, tbPrimaria( i ).alias|| '', '');\r\n        end loop;\r\n            \r\n        DBMS_LOB.APPEND(oclFile, ''inuCACHE ) ) THEN\r\n            pkErrors.SetErrorCode( csbDIVISION, csbMODULE, cnuRECORD_YA_EXISTE );\r\n            pkErrors.ADDSUFFIXTOMESSAGE ( csbTABLA_PK||''||sbCamposPKParaOutput||''||''''] )''||CHR(39)||'');\r\n            RAISE LOGIN_DENIED;\r\n        END IF;\r\n            \r\n        pkErrors.Pop;\r\n         \r\n    EXCEPTION\r\n        WHEN LOGIN_DENIED THEN\r\n            pkErrors.Pop;\r\n            RAISE LOGIN_DENIED;\r\n    END ValidateDupValues;\r\n    \r\n    -- Valida si el registro existe\r\n    FUNCTION fblExist\r\n    ('');\r\n        \r\n        for i in tbPrimaria.first .. tbPrimaria.last loop\r\n            DBMS_LOB.APPEND(oclFile, CHR(10)|| ''        '' || tbPrimaria( i ).param_entrada || '','');\r\n        end loop;\r\n            \r\n        DBMS_LOB.APPEND(oclFile, CHR(10)|| ''        inuCACHE    IN NUMBER DEFAULT 1\r\n    )\r\n    RETURN BOOLEAN\r\n    IS\r\n    BEGIN\r\n        pkErrors.Push( ''''pktbl'' || gsbTableCap || ''.fblExist'''' );\r\n            \r\n        --Valida si debe buscar primero en memoria Caché\r\n        IF (inuCACHE = CACHE AND fblInMemory( '');\r\n            \r\n        for i in tbPrimaria.first .. tbPrimaria.last loop\r\n            sbCadena := tbPrimaria( i ).alias;\r\n            if ( i <> tbPrimaria.last ) then\r\n                sbCadena := sbCadena || '','';\r\n            end if;\r\n            DBMS_LOB.APPEND(oclFile, sbCadena);\r\n        end loop;\r\n            \r\n        DBMS_LOB.APPEND(oclFile, '' ) ) THEN\r\n                pkErrors.Pop;\r\n                RETURN( TRUE );\r\n        END IF;\r\n        LoadRecord\r\n        ('');\r\n            \r\n        for i in tbPrimaria.first .. tbPrimaria.last loop\r\n            sbCadena := tbPrimaria( i ).alias;\r\n            if ( i <> tbPrimaria.last ) then\r\n                sbCadena := sbCadena || '','';\r\n            end if;\r\n            DBMS_LOB.APPEND(oclFile, CHR(10)|| ''            '' || sbCadena);\r\n        end loop;\r\n            \r\n        DBMS_LOB.APPEND(oclFile, CHR(10)|| ''        );\r\n            \r\n        -- Evalúa si se encontro el registro en la Base de datos\r\n        IF ( rc'' || gsbTableCap || ''.'' || lower( tbPrimaria( tbPrimaria.first ).column_name ) || '' IS NULL ) THEN\r\n            pkErrors.Pop;\r\n            RETURN( FALSE );\r\n        END IF;\r\n            \r\n        pkErrors.Pop;\r\n    \r\n        RETURN( TRUE );\r\n        \r\n    END fblExist;\r\n    \r\n    -- Obtiene el registro\r\n    FUNCTION frcGetRecord\r\n    ('');\r\n        \r\n        for i in tbPrimaria.first .. tbPrimaria.last loop\r\n            DBMS_LOB.APPEND(oclFile, CHR(10)|| ''        '' || tbPrimaria( i ).param_entrada || '','');\r\n        end loop;\r\n            \r\n        DBMS_LOB.APPEND(oclFile, CHR(10)|| ''        inuCACHE    IN NUMBER DEFAULT 1\r\n    )\r\n    RETURN '' || lower( csbTABLA ) || ''%ROWTYPE\r\n    IS\r\n    BEGIN\r\n        pkErrors.Push( ''''pktbl'' || gsbTableCap || ''.frcGetRecord'''' );\r\n            \r\n        --Valida si el registro ya existe\r\n        AccKey\r\n        ('');\r\n            \r\n        for i in tbPrimaria.first .. tbPrimaria.last loop\r\n            DBMS_LOB.APPEND(oclFile, CHR(10)|| ''            '' || tbPrimaria( i ).alias || '','');\r\n        end loop;\r\n            \r\n        DBMS_LOB.APPEND(oclFile, CHR(10)|| ''            inuCACHE\r\n        );\r\n    \r\n        pkErrors.Pop;\r\n        RETURN ( rc'' || gsbTableCap || '' );\r\n         \r\n    EXCEPTION\r\n        WHEN LOGIN_DENIED THEN\r\n            pkErrors.Pop;\r\n            RAISE LOGIN_DENIED;\r\n    END frcGetRecord;\r\n    '');\r\n            \r\n    /* Recorre los campos creando las funciones para obtener campos puntuales */\r\n    FOR i in tbCampos.FIRST .. tbCampos.LAST LOOP    \r\n        \r\n        -- No crea método para obtener o actualizar pk\r\n        IF ( fboCampoEnPrimaryKey( tbPrimaria, tbCampos(i).column_name )) THEN\r\n            CONTINUE;\r\n        END IF;\r\n                              \r\n        -- Reemplaza el nombre de la tabla\r\n        sbFunction := REPLACE(csbTemplateFunction, ''<Tabla>'', Initcap(csbTABLA));                    \r\n                        \r\n        -- Reemplaza el nombre del campo\r\n        sbFunction := REPLACE(sbFunction, ''<Campo>'', Initcap(tbCampos(i).column_name));                                \r\n                        \r\n        -- Reemplazan parámetros de entrada que son campos de la PK\r\n        sbFunction := REPLACE(sbFunction, ''<ParamPK>'', sbParamPK);\r\n\r\n        -- Reemplaza las variables de la pk\r\n        sbFunction := REPLACE(sbFunction, ''<pk>'', sbVariablesPK);\r\n\r\n        -- Reemplaza el tipo de función según el tipo de dato\r\n        sbFunction := REPLACE(sbFunction, ''<Type>'', fsbTipoDato(tbCampos(i).data_type , FALSE, TRUE) );\r\n\r\n        -- Escribe la función\r\n        DBMS_LOB.APPEND(oclFile, sbFunction);\r\n\r\n    END LOOP;\r\n    \r\n    /* Recorre los campos creando los procedimientos para actualizar campos puntuales */\r\n    FOR i in tbCampos.FIRST .. tbCampos.LAST LOOP    \r\n\r\n        -- No crea método para obtener o actualizar pk\r\n        IF ( fboCampoEnPrimaryKey( tbPrimaria, tbCampos(i).column_name )) THEN\r\n            CONTINUE;\r\n        END IF;\r\n\r\n        -- Reemplaza el nombre de la tabla\r\n        sbFunction := REPLACE(csbTemplateUpdate, ''<Tabla>'', Initcap(csbTABLA));                    \r\n                        \r\n        -- Reemplaza el nombre del campo\r\n        sbFunction := REPLACE(sbFunction, ''<Campo>'', Initcap(tbCampos(i).column_name));\r\n        \r\n        -- Reemplaza el parámetro de entrada el campo\r\n        sbFunction := REPLACE(sbFunction, ''<ParamCampo>'', tbCampos(i).param_entrada );\r\n        \r\n        -- Reemplaza el nombre del parámetro de entrada del campo\r\n        sbFunction := REPLACE(sbFunction, ''<AliasCampo>'', tbCampos(i).param_alias );\r\n                        \r\n        -- Reemplazan parámetros de entrada que son campos de la PK\r\n        sbFunction := REPLACE(sbFunction, ''<ParamPK>'', sbParamPK);\r\n\r\n        -- Reemplaza las variables de la pk\r\n        sbFunction := REPLACE(sbFunction, ''<pk>'', sbVariablesPK);\r\n\r\n        -- Reemplaza el tipo de función según el tipo de dato\r\n        sbFunction := REPLACE(sbFunction, ''<Type>'', fsbTipoDato(tbCampos(i).data_type , FALSE, TRUE) );\r\n\r\n        -- Reemplaza los campos de la pk en el Where del update\r\n        sbFunction := REPLACE(sbFunction, ''<Condicion>'', sbWherePorPK);\r\n\r\n        -- Reemplaza los campos de la pk en el mensaje de error\r\n        sbFunction := REPLACE(sbFunction, ''<sbCamposPKParaOutput>'', sbCamposPKParaOutputCom);\r\n\r\n        -- Reemplaza los campos de la pk en el mensaje de error\r\n        sbFunction := REPLACE(sbFunction, ''<sbCamposPKParaOutputSinCom>'', sbCamposPKParaOutput);\r\n\r\n        -- Escribe la función\r\n        DBMS_LOB.APPEND(oclFile, sbFunction);\r\n\r\n    END LOOP;    \r\n    \r\n    END IF;\r\n        \r\n        DBMS_LOB.APPEND(oclFile, CHR(10)||''END pktbl'' || gsbTableCap || '';''||CHR(10)||''/'');\r\n    \r\n        --utl_file.fclose( flArchivo );\r\n        \r\n        dbms_output.put_line( ''Se creó el archivo PKTBL'' || upper( csbTABLA ) || ''.sql en la ruta '' || csbRUTA_ARCHIVO );\r\n    EXCEPTION\r\n        when OTHERS then\r\n            onuErrorCode := 100;\r\n            osbErrorMessage := sqlerrm;\r\n            dbms_output.put_line( sqlerrm );\r\n            /*if ( utl_file.is_open( flArchivo )) then\r\n                utl_file.fclose( flArchivo );\r\n            end if;*/\r\n    END;    \r\nbegin\r\n    pGenerapktbl(:isbTabla,:isbOwner,:isOrder,:oclFile,:onuErrorCode,:osbErrorMessage);\r\nend;\r\n', '99')",
                    "INSERT INTO html (name, documentation, company) VALUES ('AUDITORIA_TABLA', 'declare\r\n    PROCEDURE p_DC_CreaTriggerAudit\r\n    (\r\n        isbTableName    IN  VARCHAR2,\r\n        isbAutor        IN  VARCHAR2,\r\n        isbLogin        IN  VARCHAR2,\r\n        isbTicket       IN  VARCHAR2,\r\n        isbPK           IN  VARCHAR2,\r\n        osbScript       OUT CLOB\r\n    )\r\n    IS\r\n    /*******************************************************************************\r\n        <Procedure Fuente=\"Propiedad Intelectual de Empresas Públicas de Medellín\">\r\n        <Unidad>p_DC_CreaTriggerAudit</Unidad>\r\n        <Descripcion>\r\n            Crea el fuente para un trigger de auditoría\r\n        </Descripcion>\r\n        <Autor> Diego Fernando Coba - MVM Ingeniería de Software </Autor>\r\n        <Fecha> 14-Ene-2021 </Fecha>\r\n            <param nombre=\"isbTableName\" tipo=\"TYPE\" Direccion=\"In\" >\r\n                Tabla a la que se le va a crear la auditoría\r\n            </param>\r\n            <param nombre=\"isbAutor\" tipo=\"TYPE\" Direccion=\"In\" >\r\n                Autor\r\n            </param>\r\n            <param nombre=\"isbLogin\" tipo=\"TYPE\" Direccion=\"In\" >\r\n                Usuario\r\n            </param>\r\n            <param nombre=\"isbTicket\" tipo=\"TYPE\" Direccion=\"In\" >\r\n                WO o HU\r\n            </param>\r\n            <param nombre=\"isbPK\" tipo=\"TYPE\" Direccion=\"In\" >\r\n                Llame primaria\r\n            </param>\r\n            <param nombre=\"osbScript\" tipo=\"TYPE\" Direccion=\"Out\" >\r\n                Contenido del Script\r\n            </param>\r\n        <Historial>\r\n            <Modificacion Autor=\"dcoba\" Fecha=\"14-Ene-2021\" Inc=\"NNNNNN\">\r\n                Creación del método.\r\n            </Modificacion>\r\n        </Historial>\r\n        </Procedure>\r\n    *******************************************************************************/\r\n\r\n        csbSP_NAME                  CONSTANT VARCHAR2(32)                   := $$PLSQL_UNIT||''.'';\r\n        csbPUSH                     CONSTANT VARCHAR2( 4)                   := pkg_EPM_Constante.fsbPUSH     ;\r\n        csbPOP                      CONSTANT VARCHAR2( 4)                   := pkg_EPM_Constante.fsbPOP      ;\r\n        csbPOP_ERC                  CONSTANT VARCHAR2( 4)                   := pkg_EPM_Constante.fsbPOP_ERC  ;\r\n        csbPOP_ERR                  CONSTANT VARCHAR2( 4)                   := pkg_EPM_Constante.fsbPOP_ERR  ;\r\n        cnuNVLTRC                   CONSTANT NUMBER  ( 2)                   := pkg_EPM_Constante.fnuNVL_BO;\r\n\r\n        -- Nombre del método\r\n        sbNameMethod        VARCHAR2(30) := ''p_DC_CreaTriggerAudit'';\r\n\r\n        CURSOR  cuTableDesc\r\n        (\r\n            isbTabla    IN  VARCHAR2\r\n        )\r\n        IS\r\n            SELECT  comments\r\n            FROM    dba_tab_comments\r\n            WHERE   TABLE_NAME = UPPER(isbTabla);\r\n\r\n        sbTableDesc dba_tab_comments.comments%TYPE;\r\n\r\n        CURSOR cuCampos\r\n        (\r\n            isbTabla    IN  VARCHAR2\r\n        )\r\n        IS\r\n            SELECT  COLUMN_NAME,\r\n                    DECODE(DATA_TYPE, ''VARCHAR2'', ''''''-'''''', ''NUMBER'', -1, ''DATE'', ''TO_DATE(''''''||TO_CHAR(UT_Date.fdtMinDate, ''YYYY/MM/DD HH24:MI:SS'')||'''''', ''''YYYY/MM/DD HH24:MI:SS'''')'') DEFAULT_VALUE\r\n            FROM\r\n            (\r\n                SELECT  tc.COLUMN_NAME COLUMN_NAME,\r\n                        tc.DATA_TYPE,\r\n                        tc.DATA_PRECISION,\r\n                        tc.DATA_SCALE,\r\n                        cc.COMMENTS COMMENTS,\r\n                        tc.COLUMN_ID\r\n                FROM    dba_tab_columns tc, dba_col_comments cc\r\n                WHERE   tc.TABLE_NAME = UPPER(isbTabla)\r\n                AND     tc.TABLE_NAME = cc.TABLE_NAME\r\n                AND     tc.COLUMN_NAME = cc.COLUMN_NAME\r\n                AND     tc.COLUMN_NAME <> UPPER(isbPK)\r\n            )\r\n            ORDER BY COLUMN_ID, COLUMN_NAME DESC;\r\n\r\n        TYPE tytbCampos IS TABLE OF cuCampos%ROWTYPE INDEX BY BINARY_INTEGER;\r\n        tbCampos tytbCampos;\r\n        nuIdxCampos BINARY_INTEGER;\r\n\r\n        sbFieldCondTemplate VARCHAR2(500)   := ''    ( NVL( new.[{FIELD}],[{DEFAULT_VAL}] ) <> NVL( old.[{FIELD}],[{DEFAULT_VAL}]) )'';\r\n        sbFieldCond         VARCHAR2(32000);\r\n        sbFielConditions    VARCHAR2(32000);\r\n        csbENTER            VARCHAR2(2)     := CHR(13);\r\n        csbSLASH            VARCHAR2(2)     := CHR(47);\r\n        sbFieldAuditTemplate    VARCHAR2(500) :=\r\n    ''\r\n        IF (NVL( :new.[{FIELD}], [{DEFAULT_VAL}]) <> NVL( :old.[{FIELD}], [{DEFAULT_VAL}])) THEN\r\n            rcAudit.O_[{FIELD}]  := :old.[{FIELD}];\r\n            rcAudit.N_[{FIELD}]  := :new.[{FIELD}];\r\n        END IF;\r\n\r\n    '';\r\n        sbFieldAudit        VARCHAR2(32000);\r\n        sbFieldsAudits      VARCHAR2(32000);\r\n\r\n        sbScript            CLOB :=\r\n    ''CREATE OR REPLACE TRIGGER TRG_AUD_[{TABLE}]\r\n    AFTER UPDATE OR DELETE ON [{TABLE}]\r\n    REFERENCING OLD AS OLD NEW AS NEW\r\n    FOR EACH ROW\r\n    WHEN\r\n    (\r\n    [{CONDITIONS}]\r\n    )\r\n    DECLARE\r\n\r\n    ''||csbSLASH||''****************************************************************************\r\n        <Procedure Fuente=\"Propiedad Intelectual de Empresas Publicas de Medellín\">\r\n        <Unidad> TRG_AUD_[{TABLE}] <''||csbSLASH||''Unidad>\r\n        <Descripcion>\r\n        Registra auditoría de la tabla [{TABLE_DESC}]\r\n        <''||csbSLASH||''Descripcion>\r\n        <Autor> [{AUTOR}] - MVM <''||csbSLASH||''Autor>\r\n        <Fecha>[{DATE}]<''||csbSLASH||''Fecha>\r\n        <Historial>\r\n        <Modificacion Autor=\"[{LOGIN}]\" Fecha=\"[{DATE}]\" Inc=\"[{TICKET}]\">\r\n         Creación del trigger.\r\n        <''||csbSLASH||''Modificacion>\r\n        <''||csbSLASH||''Historial>\r\n        <''||csbSLASH||''Procedure>\r\n    *****************************************************************************''||csbSLASH||''\r\n\r\n        rcAudit                      audit_[{TABLE}]%ROWTYPE;\r\n\r\n        ----------------------------------------------------------------------------\r\n        -- Constantes:\r\n        ----------------------------------------------------------------------------\r\n\r\n        -- Para el control de traza:\r\n        csbSP_NAME                  CONSTANT VARCHAR2(32)                   := $$PLSQL_UNIT||''''.''''             ;\r\n        csbPUSH                     CONSTANT VARCHAR2( 4)                   := pkg_EPM_Constante.fsbPUSH     ;\r\n        csbPOP                      CONSTANT VARCHAR2( 4)                   := pkg_EPM_Constante.fsbPOP      ;\r\n        csbPOP_ERC                  CONSTANT VARCHAR2( 4)                   := pkg_EPM_Constante.fsbPOP_ERC  ;\r\n        csbPOP_ERR                  CONSTANT VARCHAR2( 4)                   := pkg_EPM_Constante.fsbPOP_ERR  ;\r\n        cnuNVLTRC                   CONSTANT NUMBER  ( 2)                   := pkg_EPM_Constante.fnuNVL_TR   ;\r\n\r\n    BEGIN\r\n\r\n        pkg_epm_utilidades.trace_setmsg(csbSP_NAME, cnuNVLTRC, csbPUSH);\r\n\r\n        rcAudit.CURRENT_USER_MASK           :=   Pkg_Epm_Utilidades.fsbUsuario;\r\n        rcAudit.CURRENT_TERMINAL            :=   pkg_epm_utilidades.fsbTerminal;\r\n        rcAudit.CURRENT_DATE_               :=   SYSDATE;\r\n        rcAudit.CURRENT_EXE_NAME            :=   AU_BOSystem.getSystemProcessName;\r\n        rcAudit.CURRENT_PROGRAM_NAME        :=   Pkg_Epm_Utilidades.fsbPrograma;\r\n        rcAudit.CURRENT_TERM_IP_ADDR        :=   AU_BOSystem.getSystemUserIPAddress;\r\n        rcAudit.CURRENT_USER_SO             :=   SYS_CONTEXT(''''USERENV'''', ''''OS_USER'''');\r\n        rcAudit.[{PK}]                      :=   :old.[{PK}];\r\n\r\n        IF DELETING THEN\r\n            rcAudit.Current_Event := ''''DELETE'''';\r\n        ELSIF UPDATING THEN\r\n            rcAudit.Current_Event := ''''UPDATE'''';\r\n        END IF;\r\n        [{AUDIT_FIELDS_BLOCKS}]\r\n        INSERT INTO audit_[{TABLE}] VALUES rcAudit;\r\n\r\n        pkg_epm_utilidades.trace_setmsg(csbSP_NAME, cnuNVLTRC, csbPOP);\r\n\r\n    EXCEPTION\r\n        WHEN EX.CONTROLLED_ERROR THEN\r\n            pkg_epm_utilidades.trace_setmsg(csbSP_NAME, cnuNVLTRC, csbPOP_ERC);\r\n            RAISE EX.CONTROLLED_ERROR;\r\n        WHEN OTHERS THEN\r\n            pkg_epm_utilidades.trace_setmsg(csbSP_NAME, cnuNVLTRC, csbPOP_ERR);\r\n            errors.seterror;\r\n            RAISE EX.CONTROLLED_ERROR;\r\n    END  TRG_AUD_[{TABLE}];\r\n    ''||csbSLASH||''\r\n    '';\r\n\r\n    BEGIN\r\n\r\n        pkg_EPM_Utilidades.trace_SetMsg(csbSP_NAME||sbNameMethod, cnuNVLTRC, csbPUSH);\r\n\r\n        IF (cuTableDesc%ISOPEN) THEN\r\n            CLOSE cuTableDesc;\r\n        END IF;\r\n        OPEN    cuTableDesc(isbTableName);\r\n        FETCH   cuTableDesc INTO sbTableDesc;\r\n        CLOSE   cuTableDesc;\r\n\r\n        sbScript := REPLACE(sbScript, ''[{TABLE}]'', upper(isbTableName));\r\n        sbScript := REPLACE(sbScript, ''[{AUTOR}]'', isbAutor);\r\n        sbScript := REPLACE(sbScript, ''[{DATE}]'', TO_CHAR(SYSDATE, ''YYYY/MM/DD''));\r\n        sbScript := REPLACE(sbScript, ''[{LOGIN}]'', isbLogin);\r\n        sbScript := REPLACE(sbScript, ''[{TICKET}]'', isbTicket);\r\n        sbScript := REPLACE(sbScript, ''[{PK}]'', isbPK);\r\n        sbScript := REPLACE(sbScript, ''[{TABLE_DESC}]'', sbTableDesc);\r\n\r\n        IF (cuCampos%ISOPEN) THEN\r\n            CLOSE cuCampos;\r\n        END IF;\r\n        OPEN    cuCampos(isbTableName);\r\n        FETCH   cuCampos BULK COLLECT INTO tbCampos;\r\n        CLOSE   cuCampos;\r\n\r\n        /* Recorre la colección de registros */\r\n        nuIdxCampos := tbCampos.FIRST;\r\n        LOOP\r\n            EXIT WHEN nuIdxCampos IS NULL;\r\n\r\n            sbFieldCond := REPLACE(sbFieldCondTemplate, ''[{FIELD}]'', tbCampos(nuIdxCampos).COLUMN_NAME);\r\n            sbFieldCond := REPLACE(sbFieldCond, ''[{DEFAULT_VAL}]'', tbCampos(nuIdxCampos).DEFAULT_VALUE);\r\n\r\n            -- Adiciona OR y Enter si no es el último\r\n            IF (nuIdxCampos <> tbCampos.LAST) THEN\r\n                sbFieldCond := sbFieldCond || '' OR''||csbENTER;\r\n            END IF;\r\n\r\n            -- Adiciona la condición a la lista de condiciones\r\n            sbFielConditions := sbFielConditions || sbFieldCond;\r\n\r\n            -- Llenar auditoría para el campo\r\n            sbFieldAudit := REPLACE(sbFieldAuditTemplate, ''[{FIELD}]'', tbCampos(nuIdxCampos).COLUMN_NAME);\r\n            sbFieldAudit := REPLACE(sbFieldAudit, ''[{DEFAULT_VAL}]'', tbCampos(nuIdxCampos).DEFAULT_VALUE);\r\n\r\n            sbFieldsAudits := sbFieldsAudits || sbFieldAudit;\r\n\r\n            /* Avanza al siguiente registro */\r\n            nuIdxCampos := tbCampos.NEXT(nuIdxCampos);\r\n        END LOOP;\r\n\r\n        -- Reemplaza las condiciones y el llenado\r\n        sbScript := REPLACE(sbScript, ''[{CONDITIONS}]'', sbFielConditions);\r\n        sbScript := REPLACE(sbScript, ''[{AUDIT_FIELDS_BLOCKS}]'', sbFieldsAudits);\r\n\r\n        osbScript := sbScript;\r\n\r\n        pkg_EPM_Utilidades.trace_SetMsg(csbSP_NAME||sbNameMethod, cnuNVLTRC, csbPOP);\r\n\r\n    EXCEPTION\r\n        WHEN Epm_Errors.EX_CTRLERROR THEN\r\n            pkg_EPM_Utilidades.trace_SetMsg(csbSP_NAME||sbNameMethod, cnuNVLTRC, csbPOP_ERC);\r\n            RAISE;\r\n        WHEN OTHERS THEN\r\n            Epm_Errors.SetError;\r\n            pkg_EPM_Utilidades.trace_SetMsg(csbSP_NAME||sbNameMethod, cnuNVLTRC, csbPOP_ERR);\r\n            RAISE Epm_Errors.EX_CTRLERROR;\r\n    END p_DC_CreaTriggerAudit;\r\n    \r\n    PROCEDURE p_DC_GeneraAudit\r\n    (\r\n        isbTableName    IN  VARCHAR2,\r\n        isbAutor        IN  VARCHAR2,\r\n        isbLogin        IN  VARCHAR2,\r\n        isbTicket       IN  VARCHAR2,\r\n        isbPK           IN  VARCHAR2,\r\n        osbScript       OUT CLOB,\r\n        osbTrgScript    OUT CLOB\r\n    )\r\n    /*******************************************************************************\r\n        <Procedure Fuente=\"Propiedad Intelectual de Empresas Públicas de Medellín\">\r\n        <Unidad>p_DC_GeneraAudit</Unidad>\r\n        <Descripcion>\r\n            Genera una tabla de auditoría\r\n        </Descripcion>\r\n        <Autor> Diego Fernando Coba - MVM Ingeniería de Software </Autor>\r\n        <Fecha> 14-Ene-2021 </Fecha>\r\n        <Parametros>\r\n            <param nombre=\"isbTableName\" tipo=\"TYPE\" Direccion=\"In\" >\r\n                Tabla a la que se le va a crear la auditoría\r\n            </param>\r\n            <param nombre=\"isbAutor\" tipo=\"TYPE\" Direccion=\"In\" >\r\n                Autor\r\n            </param>\r\n            <param nombre=\"isbLogin\" tipo=\"TYPE\" Direccion=\"In\" >\r\n                Usuario\r\n            </param>\r\n            <param nombre=\"isbTicket\" tipo=\"TYPE\" Direccion=\"In\" >\r\n                WO o HU\r\n            </param>\r\n            <param nombre=\"isbPK\" tipo=\"TYPE\" Direccion=\"In\" >\r\n                Llame primaria\r\n            </param>\r\n            <param nombre=\"osbScript\" tipo=\"TYPE\" Direccion=\"Out\" >\r\n                Contenido del Script\r\n            </param>\r\n        </Parametros>\r\n        <Historial>\r\n            <Modificacion Autor=\"dcoba\" Fecha=\"14-Ene-2021\" Inc=\"NNNNNN\">\r\n                Creación del método.\r\n            </Modificacion>\r\n        </Historial>\r\n        </Procedure>\r\n    *******************************************************************************/\r\n    IS\r\n        -- Nombre del método\r\n        sbNameMethod        VARCHAR2(30) := ''p_DC_GeneraAudit'';\r\n\r\n        csbSP_NAME                  CONSTANT VARCHAR2(32)                   := $$PLSQL_UNIT||''.'';\r\n        csbPUSH                     CONSTANT VARCHAR2( 4)                   := pkg_EPM_Constante.fsbPUSH     ;\r\n        csbPOP                      CONSTANT VARCHAR2( 4)                   := pkg_EPM_Constante.fsbPOP      ;\r\n        csbPOP_ERC                  CONSTANT VARCHAR2( 4)                   := pkg_EPM_Constante.fsbPOP_ERC  ;\r\n        csbPOP_ERR                  CONSTANT VARCHAR2( 4)                   := pkg_EPM_Constante.fsbPOP_ERR  ;\r\n        cnuNVLTRC                   CONSTANT NUMBER  ( 2)                   := pkg_EPM_Constante.fnuNVL_BO;\r\n\r\n        CURSOR  cuTableDesc\r\n        (\r\n            isbTabla    IN  VARCHAR2\r\n        )\r\n        IS\r\n            SELECT  comments\r\n            FROM    dba_tab_comments\r\n            WHERE   TABLE_NAME = UPPER(isbTabla);\r\n\r\n        sbTableDesc dba_tab_comments.comments%TYPE;\r\n\r\n        CURSOR cuCampos\r\n        (\r\n            isbTabla    IN  VARCHAR2\r\n        )\r\n        IS\r\n            SELECT  COLUMN_NAME,\r\n                    DATA_TYPE,\r\n                    DATA_PRECISION,\r\n                    DATA_SCALE,\r\n                    COMMENTS\r\n            FROM\r\n            (\r\n                WITH vwOLD_NEW AS\r\n                (\r\n                    SELECT ''O_'' MODO, '' antes del cambio'' SUFIJO FROM dual\r\n                    UNION\r\n                    SELECT ''N_'' MODO, '' después del cambio'' SUFIJO FROM dual\r\n                )\r\n                SELECT  MODO||tc.COLUMN_NAME COLUMN_NAME,\r\n                        tc.DATA_TYPE,\r\n                        DECODE(tc.DATA_TYPE, ''VARCHAR2'', DATA_LENGTH,tc.DATA_PRECISION) DATA_PRECISION,\r\n                        tc.DATA_SCALE,\r\n                        cc.COMMENTS||SUFIJO COMMENTS,\r\n                        tc.COLUMN_ID,\r\n                        MODO\r\n                FROM    dba_tab_columns tc, dba_col_comments cc, vwOLD_NEW\r\n                WHERE   tc.TABLE_NAME = UPPER(isbTabla)\r\n                AND     tc.TABLE_NAME = cc.TABLE_NAME\r\n                AND     tc.COLUMN_NAME = cc.COLUMN_NAME\r\n                AND     tc.COLUMN_NAME <> UPPER(isbPK)\r\n\r\n                UNION\r\n\r\n                -- Primary Key (No debe llevar O_ ni N_)\r\n                SELECT  tc.COLUMN_NAME COLUMN_NAME,\r\n                        tc.DATA_TYPE,\r\n                        DECODE(tc.DATA_TYPE, ''VARCHAR2'', DATA_LENGTH, tc.DATA_PRECISION) DATA_PRECISION,\r\n                        tc.DATA_SCALE,\r\n                        cc.COMMENTS COMMENTS,\r\n                        tc.COLUMN_ID,\r\n                        ''O'' MODO\r\n                FROM    dba_tab_columns tc, dba_col_comments cc\r\n                WHERE   tc.TABLE_NAME = UPPER(isbTabla)\r\n                AND     tc.TABLE_NAME = cc.TABLE_NAME\r\n                AND     tc.COLUMN_NAME = cc.COLUMN_NAME\r\n                AND     tc.COLUMN_NAME = UPPER(isbPK)\r\n            )\r\n            ORDER BY COLUMN_ID, COLUMN_NAME DESC;\r\n\r\n        TYPE tytbCampos IS TABLE OF cuCampos%ROWTYPE INDEX BY BINARY_INTEGER;\r\n        tbCampos tytbCampos;\r\n\r\n        csbENTER            VARCHAR2(2) := CHR(13);\r\n        csbSLASH            VARCHAR2(2) := CHR(47);\r\n        nuIdxCampos         BINARY_INTEGER;\r\n\r\n        sbTemplate_Campo    VARCHAR2(2000) := ''[{FIELD}] [{TYPE}]([{PRECISION}],[{SCALE}])'';\r\n        sbTemplate_No_Pre   VARCHAR2(2000) := ''[{FIELD}] [{TYPE}]'';\r\n        sbCampo             VARCHAR2(2000);\r\n        sbCampos            VARCHAR2(32000);\r\n        sbTemplate_Comment  VARCHAR2(1000) := ''COMMENT ON COLUMN audit_[{TABLE}].[{FIELD}] IS ''''[{COMMENT}]''''''||csbENTER||''/''||csbENTER;\r\n        sbComment           VARCHAR2(32000);\r\n        sbComments          VARCHAR2(32767);\r\n        sbScript            CLOB :=\r\n    ''-- ************************************************************************\r\n    -- Propiedad intelectual de Empresas Públicas de Medellín Copyright 2021\r\n    --\r\n    -- Archivo            craudit_[{TABLE}].sql\r\n    -- Descripción        Creación de auditoría para la tabla [{TABLE_DESC}]\r\n    -- Observaciones\r\n    --\r\n    -- Autor              [{AUTOR}]\r\n    -- Fecha              [{DATE}]\r\n    --\r\n    -- Historia de Modificaciones\r\n    -- Fecha        Autor      Modificación\r\n    -- [{DATE}]  [{LOGIN}]   [{TICKET}] - Creación\r\n    -- ************************************************************************\r\n\r\n    PROMPT - Script    craudit_[{TABLE}].sql\r\n    PROMPT - Autor     [{AUTOR}]\r\n    PROMPT\r\n\r\n    PROMPT - Creando tabla audit_[{TABLE}]\r\n\r\n    CREATE TABLE audit_[{TABLE}]\r\n    (\r\n        CURRENT_EXE_NAME\t    VARCHAR2(50) NOT NULL,\r\n        CURRENT_USER_MASK       VARCHAR2(30) NOT NULL,\r\n        CURRENT_TERMINAL        VARCHAR2(50) NOT NULL,\r\n        CURRENT_USER_SO         VARCHAR2(30),\r\n        CURRENT_DATE_           TIMESTAMP(6) NOT NULL,\r\n        CURRENT_PROGRAM_NAME    VARCHAR2(64) NOT NULL,\r\n        CURRENT_TERM_IP_ADDR    VARCHAR2(30),\r\n        CURRENT_EVENT           VARCHAR2(30) NOT NULL,\r\n    [FIELDS]\r\n    )\r\n    ''||csbSLASH||''\r\n    COMMENT ON TABLE audit_[{TABLE}] IS ''''Auditoría para la tabla [{TABLE_DESC}]''''\r\n    ''||csbSLASH||''\r\n    COMMENT ON COLUMN audit_[{TABLE}].CURRENT_EXE_NAME IS ''''Nombre del ejecutable''''\r\n    ''||csbSLASH||''\r\n    COMMENT ON COLUMN audit_[{TABLE}].CURRENT_USER_MASK IS ''''Usuario de base de datos que realiza el cambio''''\r\n    ''||csbSLASH||''\r\n    COMMENT ON COLUMN audit_[{TABLE}].CURRENT_TERMINAL IS ''''Terminal desde donde se aplica el cambio''''\r\n    ''||csbSLASH||''\r\n    COMMENT ON COLUMN audit_[{TABLE}].CURRENT_USER_SO IS ''''Usuario de sistema operativo que realiza el cambio''''\r\n    ''||csbSLASH||''\r\n    COMMENT ON COLUMN audit_[{TABLE}].CURRENT_DATE_ IS ''''Momento en el que se aplica el cambio''''\r\n    ''||csbSLASH||''\r\n    COMMENT ON COLUMN audit_[{TABLE}].CURRENT_PROGRAM_NAME IS ''''Nombre del programa''''\r\n    ''||csbSLASH||''\r\n    COMMENT ON COLUMN audit_[{TABLE}].CURRENT_TERM_IP_ADDR IS ''''Dirección IP desde la cual se realiza el cambio''''\r\n    ''||csbSLASH||''\r\n    COMMENT ON COLUMN audit_[{TABLE}].CURRENT_EVENT IS ''''Evento (Actualización o Borrado)''''\r\n    ''||csbSLASH||''\r\n    [{COLUMN_COMMENTS}]\r\n    '';\r\n\r\n    BEGIN\r\n\r\n        pkg_EPM_Utilidades.trace_SetMsg(csbSP_NAME||sbNameMethod, cnuNVLTRC, csbPUSH);\r\n\r\n        /* Consulta información de los campos */\r\n        IF (cuCampos%ISOPEN) THEN\r\n            CLOSE cuCampos;\r\n        END IF;\r\n        OPEN    cuCampos(isbTableName);\r\n        FETCH   cuCampos BULK COLLECT INTO tbCampos;\r\n        CLOSE   cuCampos;\r\n\r\n        IF (cuTableDesc%ISOPEN) THEN\r\n            CLOSE cuTableDesc;\r\n        END IF;\r\n        OPEN    cuTableDesc(isbTableName);\r\n        FETCH   cuTableDesc INTO sbTableDesc;\r\n        CLOSE   cuTableDesc;\r\n\r\n        /* Adiciona campos */\r\n        sbScript := REPLACE(sbScript, ''[{AUTOR}]'', isbAutor);\r\n        sbScript := REPLACE(sbScript, ''[{LOGIN}]'', isbLogin);\r\n        sbScript := REPLACE(sbScript, ''[{DATE}]'', TO_CHAR(SYSDATE, ''YYYY/MM/DD''));\r\n        sbScript := REPLACE(sbScript, ''[{TICKET}]'', isbTicket);\r\n        sbScript := REPLACE(sbScript, ''[{TABLE}]'', UPPER(isbTableName));\r\n        sbScript := REPLACE(sbScript, ''[{TABLE_DESC}]'', sbTableDesc);\r\n\r\n        /* Recorre la colección de registros */\r\n        nuIdxCampos := tbCampos.FIRST;\r\n        LOOP\r\n            EXIT WHEN nuIdxCampos IS NULL;\r\n\r\n            -- Antepone coma y enter a la lista de campos\r\n            IF (nuIdxCampos <> tbCampos.FIRST) THEN\r\n                sbCampos := sbCampos||'',''||csbENTER;\r\n            END IF;\r\n\r\n            -- Define si usa template con precisión o sin precisión\r\n            IF ( tbCampos(nuIdxCampos).DATA_TYPE IN (''DATE'', ''CLOB'', ''BLOB'') ) THEN\r\n                sbCampo := REPLACE(sbTemplate_No_Pre, ''[{FIELD}]'', tbCampos(nuIdxCampos).COLUMN_NAME);\r\n            ELSE\r\n                sbCampo := REPLACE(sbTemplate_Campo, ''[{FIELD}]'', tbCampos(nuIdxCampos).COLUMN_NAME);\r\n            END IF;\r\n\r\n            sbCampo := REPLACE(sbCampo, ''[{TYPE}]'', tbCampos(nuIdxCampos).DATA_TYPE);\r\n            sbCampo := REPLACE(sbCampo, ''[{PRECISION}]'', tbCampos(nuIdxCampos).DATA_PRECISION);\r\n            sbCampo := REPLACE(sbCampo, ''[{SCALE}]'', tbCampos(nuIdxCampos).DATA_SCALE);\r\n\r\n            -- Ajusta la indentación\r\n            sbcampo := ''    ''||sbCampo;\r\n\r\n            -- Si el campo es varchar, elimina la coma porque no se usa escala\r\n            IF ( tbCampos(nuIdxCampos).DATA_TYPE = ''VARCHAR2'') THEN\r\n                sbcampo := REPLACE(sbcampo, '','', '''');\r\n            END IF;\r\n\r\n            -- Adiciona a la lista de campos\r\n            sbCampos := sbCampos||sbCampo;\r\n\r\n            -- Arma el comentario\r\n            sbComment := REPLACE(sbTemplate_Comment, ''[{TABLE}]'', upper(isbTableName));\r\n            sbComment := REPLACE(sbComment, ''[{FIELD}]'', tbCampos(nuIdxCampos).COLUMN_NAME);\r\n            sbComment := REPLACE(sbComment, ''[{COMMENT}]'', tbCampos(nuIdxCampos).COMMENTS);\r\n\r\n            -- Adiciona el comentario\r\n            sbComments := sbComments||sbComment;\r\n\r\n            /* Avanza al siguiente registro */\r\n            nuIdxCampos := tbCampos.NEXT(nuIdxCampos);\r\n        END LOOP;\r\n\r\n        -- Reemplaza la lista de campos\r\n        sbScript := REPLACE(sbScript, ''[FIELDS]'', sbCampos);\r\n\r\n        -- Reemplaza la lista de comentarios\r\n        sbScript := REPLACE(sbScript, ''[{COLUMN_COMMENTS}]'', sbComments);\r\n\r\n        -- Retorna el script creado\r\n        osbScript := sbScript;\r\n\r\n        -- Crea el script para el trigger que realizará la auditoría\r\n        p_DC_CreaTriggerAudit\r\n        (\r\n            isbTableName,\r\n            isbAutor,\r\n            isbLogin,\r\n            isbTicket,\r\n            isbPK,\r\n            osbTrgScript\r\n        );\r\n\r\n        pkg_EPM_Utilidades.trace_SetMsg(csbSP_NAME||sbNameMethod, cnuNVLTRC, csbPOP);\r\n\r\n    EXCEPTION\r\n        WHEN Epm_Errors.EX_CTRLERROR THEN\r\n            pkg_EPM_Utilidades.trace_SetMsg(csbSP_NAME||sbNameMethod, cnuNVLTRC, csbPOP_ERC);\r\n            RAISE;\r\n        WHEN OTHERS THEN\r\n            Epm_Errors.SetError;\r\n            pkg_EPM_Utilidades.trace_SetMsg(csbSP_NAME||sbNameMethod, cnuNVLTRC, csbPOP_ERR);\r\n            RAISE Epm_Errors.EX_CTRLERROR;\r\n    END p_DC_GeneraAudit;\r\nbegin\r\n    p_DC_GeneraAudit(:isbTableName,:isbAutor,:isbLogin,:isbTicket,:isbPK,:osbScript,:osbTrgScript);\r\nend;\r\n', '99')"
                };

                foreach (string sql in query)
                {
                    try
                    {
                        SqliteDAO.pExecuteNonQuery(sql);
                    }
                    catch (Exception ex) { }
                }

                SqliteDAO.pActualizaVersion("1.1.6.5");
            }

            if (!SqliteDAO.pblValidaVersion("1.1.6.7"))
            {
                string[] query =
                 {
                    "alter table userbd add main text",
                    "delete from userbd",
                    "INSERT INTO userbd (user, company, password, basedatos,main) VALUES ('FLEX', '99', 'Fl3xv8Dll0_0987', 'SFDLLO','S')",
                    "INSERT INTO userbd (user, company, password, basedatos,main) VALUES ('FLEX_CUSTOMIZACION', '99', 'CusT0v8Dll0_0987', 'SFDLLO','N')",
                    "INSERT INTO userbd (user, company, password, basedatos,main) VALUES ('OPENSIRIUS', '99', 'Op3n$is1usdllo', 'SFDLLO','N')",
                    "INSERT INTO html (name, documentation, company) VALUES ('CREA_USUARIOS', 'SET SERVEROUTPUT ON\r\n/*\r\n  \r\n   Autor:        Llozada\r\n   Fecha:        16-01-2019 \r\n   Descripcion:  Script para creacion de usuarios SQL_<LOGIN_RED>                 \r\n\r\n*/\r\nDECLARE\r\n    ---Archivos planos de salida\r\n    sbArchivoSalidaDatos              VARCHAR2 (200);\r\n    iflFileHandle_out                 pkg_EPM_GestionArchivos.TyRcArchivo;     -- Tipo archivo del sistema\r\n    \r\n    ---Archivos planos de salida\r\n    sbArchivoSalidaDatos_err          VARCHAR2 (200);\r\n    iflFileHandle_err                 pkg_EPM_GestionArchivos.TyRcArchivo;     -- Tipo archivo del sistema\r\n\r\n    -- Se definen las variables para calcular el tiempo que demora el procedimiento.\r\n    dtTiempoInicia     TIMESTAMP(9);\r\n    dtTiempoTermina    TIMESTAMP(9);\r\n    dtTiempoUtilizado  INTERVAL DAY TO SECOND(9);\r\n\r\n    sbNumeroOC         VARCHAR2(20) := ''RESULTADO'';\r\n    sbSepara           VARCHAR2(1)  := ''|'';\r\n    sbSepaFile         VARCHAR2(1)  := ''|'';\r\n    sbRuta             VARCHAR2(100) := ''/output/traza'';\r\n\tsbUsuarioSql\t   VARCHAR2(50);\r\n\r\n    nuTotal             PLS_INTEGER := 0;\r\n    nuOk                PLS_INTEGER := 0;\r\n    nuErr               PLS_INTEGER := 0;\r\n    nuCicloEsp          PLS_INTEGER := 0;\r\n    \r\n    sbCreaUser          VARCHAR2(2000) := ''CREATE USER %usuario IDENTIFIED BY %pass DEFAULT TABLESPACE USERS TEMPORARY TABLESPACE TEMP PROFILE DEFAULT'';\r\n    sbTableSpace        VARCHAR2(200)  := ''GRANT UNLIMITED TABLESPACE TO %usuario'';\r\n    \r\n    TYPE tyUsuarios IS TABLE OF VARCHAR2(40) ;     \r\n        \r\n    TYPE typermisos IS TABLE OF VARCHAR2(400);                                 \r\n    tblPermisos typermisos  := typermisos(\r\n                                             --usuarios de creacion de objetos\r\n                                            --''GRANT ACCESO_OBJETOS TO %usuario'',\r\n                                            --''GRANT DESCRIBE_OBJETO TO %usuario'',\r\n                                            --''GRANT CONSULTA_TODAS_LAS_TABLAS TO %usuario'',\r\n                                            ''GRANT CREATE TYPE TO %usuario'',\r\n                                            ''GRANT CREATE VIEW TO %usuario'',\r\n                                            ''GRANT CREATE TABLE TO %usuario'',\r\n                                            ''GRANT ALTER SESSION TO %usuario'',\r\n                                            ''GRANT CREATE SESSION TO %usuario'',\r\n                                            ''GRANT CREATE SYNONYM TO %usuario'',\r\n                                            ''GRANT CREATE TRIGGER TO %usuario'',\r\n                                            ''GRANT CREATE SEQUENCE TO %usuario'',\r\n                                            ''GRANT CREATE PROCEDURE TO %usuario'',\r\n                                            ''grant SELECT ANY DICTIONARY to %usuario''\r\n                                     );\r\n  \r\n\t  CURSOR CuExistUsuario\r\n\t  (\r\n\t\tisbUsuario IN VARCHAR2\r\n\t  )\r\n\t  IS\r\n\t  SELECT COUNT(1) \r\n\t\tFROM dba_users\r\n\t   WHERE username = isbUsuario; \r\n\t  \r\n\t  CURSOR cuTables\r\n\t  (\r\n\t\tisbUsuaSQL IN VARCHAR2\r\n\t  )\r\n\t  IS\r\n\t  select ''GRANT SELECT, DELETE, INSERT, UPDATE ON '' || owner || ''.'' || table_name ||'' TO ''||isbUsuaSQL AS sentencia\r\n\t\tfrom dba_tables tb\r\n\t   where owner like ''FLEX%''\r\n\t\t AND IOT_NAME IS NULL \r\n\t\t AND NOT EXISTS (SELECT 1 FROM dba_external_tables WHERE OWNER LIKE ''FLEX'' AND TABLE_NAME = tb.table_name );\r\n\r\n\t  CURSOR cuTablesView\r\n\t  (\r\n\t\tisbUsuaSQL IN VARCHAR2\r\n\t  )\r\n\t  IS     \r\n\t  SELECT ''GRANT SELECT ON '' || owner || ''.'' || object_name ||'' TO ''||isbUsuaSQL AS sentencia\r\n\t\tFROM dba_objects\r\n\t   WHERE owner like ''FLEX%'' \r\n\t\t AND object_type in (''TABLE'',''VIEW'');\r\n\t\t \r\n\t  CURSOR cuPaPrFu\r\n\t  (\r\n\t\tisbUsuaSQL IN VARCHAR2\r\n\t  )\r\n\t  IS \r\n\t  select ''GRANT EXECUTE ON '' || owner || ''.'' || object_name ||'' TO ''||isbUsuaSQL AS sentencia\r\n\t\tfrom dba_objects\r\n\t   where owner like ''FLEX%'' \r\n\t\t and object_type in (''PROCEDURE'',''FUNCTION'',''PACKAGE'');\r\n\r\n\t  sbSentencia  VARCHAR2(4000);\r\n\t  nuExiste     NUMBER;\r\n\r\n    sbPass\t  varchar2(100);\r\nBEGIN\r\n\r\n    --almacena la hora de inicio del proceso\r\n    dtTiempoInicia := SYSTIMESTAMP;\r\n    \r\n    sbUsuarioSql := ''[PAR_USUARIO_SQL]'';\r\n    sbPass\t\t := ''[PAR_PASS_SQL]'';\r\n    \r\n    sbArchivoSalidaDatos      := sbUsuarioSql||''_CREA_USUA_''||TO_CHAR(SYSDATE,''yyyymmdd_hh24miss'')||''.txt'';\r\n    iflFileHandle_out         := pkg_EPM_GestionArchivos.fflAbrirArchivo(sbRuta, sbArchivoSalidaDatos, ''w'');\r\n    sbArchivoSalidaDatos_err  := sbUsuarioSql||''_CREA_USUA_ERR_''||TO_CHAR(SYSDATE,''yyyymmdd_hh24miss'')||''.txt'';\r\n    iflFileHandle_err         := pkg_EPM_GestionArchivos.fflAbrirArchivo(sbRuta, sbArchivoSalidaDatos_err, ''w'');\r\n\r\n    pkg_EPM_GestionArchivos.PUT_LINE(iflFileHandle_out, ''CREACION USUARIO SQL Y PERMISOS''); \r\n\t\t\r\n    OPEN CuExistUsuario(sbUsuarioSql);\r\n      FETCH CuExistUsuario INTO nuExiste;          \r\n    CLOSE CuExistUsuario;\r\n    \r\n    IF nuExiste = 0 THEN\r\n       sbSentencia := REPLACE(sbCreaUser,''%usuario'',sbUsuarioSql);\r\n       sbSentencia := REPLACE(sbSentencia,''%pass'',sbPass);\r\n       EXECUTE IMMEDIATE sbSentencia;\r\n       sbSentencia := REPLACE(sbTableSpace,''%usuario'',sbUsuarioSql);\r\n       EXECUTE IMMEDIATE sbSentencia;\r\n       pkg_EPM_GestionArchivos.PUT_LINE(iflFileHandle_out,sbSentencia||'';'');\r\n    END IF;    \r\n\r\n    pkg_EPM_GestionArchivos.PUT_LINE(iflFileHandle_out, ''USUARIO:''||sbUsuarioSql); \r\n    DBMS_OUTPUT.PUT_LINE (''USUARIO:'' || sbUsuarioSql );\r\n    DBMS_OUTPUT.PUT_LINE (''ASIGNACION PERMISOS CREACION OBJETOS''); \r\n    FOR idx IN 1 .. tblPermisos.COUNT LOOP\r\n    BEGIN     \r\n        sbSentencia := REPLACE(tblPermisos(idx),''%usuario'',sbUsuarioSql);\r\n        pkg_EPM_GestionArchivos.PUT_LINE(iflFileHandle_out,sbSentencia||'';''); \r\n        EXECUTE IMMEDIATE sbSentencia;\r\n    EXCEPTION\r\n        WHEN OTHERS THEN\r\n             pkg_EPM_GestionArchivos.PUT_LINE (iflFileHandle_err, ''ERROR|''||SQLERRM||''|''||sbSentencia||'';'');\r\n    END;                \r\n    END LOOP; \r\n\r\n    DBMS_OUTPUT.PUT_LINE (''ASIGNACION PERMISOS TABLAS''); \r\n    pkg_EPM_GestionArchivos.PUT_LINE(iflFileHandle_out,''ASIGNACION PERMISOS TABLAS''); \r\n    FOR rctables IN cuTables(sbUsuarioSql) LOOP\r\n    BEGIN    \r\n        EXECUTE IMMEDIATE rctables.sentencia;\r\n    \r\n    EXCEPTION\r\n        WHEN OTHERS THEN\r\n             pkg_EPM_GestionArchivos.PUT_LINE (iflFileHandle_err, ''ERROR|''||SQLERRM||''|''||rctables.sentencia);\r\n    END;  \r\n    END LOOP; \r\n\r\n    DBMS_OUTPUT.PUT_LINE (''ASIGNACION PERMISOS CONSULTA TABLAS Y VISTAS''); \r\n    pkg_EPM_GestionArchivos.PUT_LINE(iflFileHandle_out,''ASIGNACION PERMISOS CONSULTA TABLAS Y VISTAS''); \r\n    FOR rctables IN cuTablesView(sbUsuarioSql) LOOP\r\n    BEGIN    \r\n        EXECUTE IMMEDIATE rctables.sentencia;\r\n    \r\n    EXCEPTION\r\n        WHEN OTHERS THEN\r\n             pkg_EPM_GestionArchivos.PUT_LINE (iflFileHandle_err, ''ERROR|''||SQLERRM||''|''||rctables.sentencia);\r\n    END;  \r\n    END LOOP;\r\n\r\n    DBMS_OUTPUT.PUT_LINE (''ASIGNACION PERMISOS PACKAGE,PROCEDURES,FUNCTIONS''); \r\n    pkg_EPM_GestionArchivos.PUT_LINE(iflFileHandle_out,''ASIGNACION PERMISOS PACKAGE,PROCEDURES,FUNCTIONS''); \r\n    FOR rctables IN cuPaPrFu(sbUsuarioSql) LOOP\r\n        BEGIN    \r\n            EXECUTE IMMEDIATE rctables.sentencia;\r\n        \r\n        EXCEPTION\r\n            WHEN OTHERS THEN\r\n                 pkg_EPM_GestionArchivos.PUT_LINE (iflFileHandle_err, ''*ERROR|''||SQLERRM||''|''||rctables.sentencia);\r\n        END;  \r\n    END LOOP;          \r\n\r\n    dtTiempoTermina   := SYSTIMESTAMP ;\r\n    dtTiempoUtilizado := dtTiempoTermina - dtTiempoInicia ;\r\n\r\n    pkg_EPM_GestionArchivos.PUT_LINE (iflFileHandle_out,''TERMINA PROCESO'');\r\n    pkg_EPM_GestionArchivos.PUT_LINE (iflFileHandle_out, ''Hora de Finalización:''||TO_CHAR(dtTiempoTermina,''DD-MM-YYYY HH24:MI:SS''));\r\n    pkg_EPM_GestionArchivos.PUT_LINE (iflFileHandle_out, ''Tiempo de Ejecucion[''||dtTiempoUtilizado||'']'');\r\n    pkg_EPM_GestionArchivos.PUT_LINE (iflFileHandle_out,''Fin Archivo'');\r\n\r\n    pkg_EPM_GestionArchivos.fclose(iflFileHandle_out);\r\n    pkg_EPM_GestionArchivos.fclose(iflFileHandle_err);\r\n    DBMS_OUTPUT.PUT_LINE (''TERMINA PROCESO''); \r\n    \r\nEXCEPTION\r\n    WHEN OTHERS THEN\r\n        pkg_EPM_GestionArchivos.PUT_LINE(iflFileHandle_err,''ERROR - General: ''||SQLERRM);\r\n        pkg_EPM_GestionArchivos.PUT_LINE(iflFileHandle_err,''Ultima Linea procesada:''||nuTotal);\r\n        pkg_EPM_GestionArchivos.PUT_LINE (iflFileHandle_err, ''Fin de Archivo'');\r\n        pkg_EPM_GestionArchivos.FCLOSE(iflFileHandle_out);\r\n        pkg_EPM_GestionArchivos.fclose(iflFileHandle_err);\r\nEND;\r\n/\r\n\r\n', '99')"
                };

                foreach (string sql in query)
                {
                    try
                    {
                        SqliteDAO.pExecuteNonQuery(sql);
                    }
                    catch (Exception ex) { }
                }

                SqliteDAO.pActualizaVersion("1.1.6.7");
            }

            if (!SqliteDAO.pblValidaVersion("1.1.6.8"))
            {
                string[] query =
                 {
                    "alter table html add filename",
                    "INSERT INTO html (name, documentation, company, filename) VALUES ('SQL_PARAMETRO', 'INSERT INTO FLEX.epm_parametr (PARAMETER_ID, DESCRIPTION, VALUE, VAL_FUNCTION, MODULE_ID, DATA_TYPE, ALLOW_UPDATE) \r\n VALUES \r\n ( \r\n     :PARAMETRO_ID, \r\n     :DESCRIPCION, \r\n     :VALOR, \r\n     :FUNCION, \r\n     -99, \r\n     :TIPO, \r\n     ''Y'' \r\n )\r\n\r\n', '99', '')",
                    "INSERT INTO html (name, documentation, company, filename) VALUES ('PLANTILLA_PARAMETRO', 'MERGE INTO EPM_PARAMETR A USING\r\n (SELECT\r\n  :PARAMETRO_ID as PARAMETER_ID,\r\n  :DESCRIPCION as DESCRIPTION,\r\n  :VALOR as VALUE,\r\n  :FUNCION as VAL_FUNCTION,\r\n  -99 as MODULE_ID,\r\n  :TIPO as DATA_TYPE,\r\n  ''Y'' as ALLOW_UPDATE\r\n  FROM DUAL) B\r\nON (A.PARAMETER_ID = B.PARAMETER_ID)\r\nWHEN NOT MATCHED THEN \r\nINSERT (\r\n  PARAMETER_ID, DESCRIPTION, VALUE, VAL_FUNCTION, MODULE_ID, \r\n  DATA_TYPE, ALLOW_UPDATE)\r\nVALUES (\r\n  B.PARAMETER_ID, B.DESCRIPTION, B.VALUE, B.VAL_FUNCTION, B.MODULE_ID, \r\n  B.DATA_TYPE, B.ALLOW_UPDATE)\r\nWHEN MATCHED THEN\r\nUPDATE SET \r\n  A.DESCRIPTION = B.DESCRIPTION,\r\n  A.VALUE = B.VALUE,\r\n  A.VAL_FUNCTION = B.VAL_FUNCTION,\r\n  A.MODULE_ID = B.MODULE_ID,\r\n  A.DATA_TYPE = B.DATA_TYPE,\r\n  A.ALLOW_UPDATE = B.ALLOW_UPDATE;\r\n\r\nCOMMIT;\r\n', '99', 'mrgepm_parametr')",
                    "INSERT INTO html (name, documentation, company, filename) VALUES ('SQL_MENSAJE', 'INSERT INTO flex.mensaje (menscodi,mensdesc,mensdivi,mensmodu,menscaus,mensposo )  \r\n VALUES \r\n( \r\n    :CODIGO, \r\n    :DESCRIPCION, \r\n    ''EPM'', \r\n    ''CUZ'', \r\n    :CAUSA, \r\n    :SOLUCION \r\n)\r\n', '99', '')",
                    "INSERT INTO html (name, documentation, company, filename) VALUES ('PLANTILLA_MENSAJE', 'MERGE INTO MENSAJE A USING\r\n (SELECT\r\n  :CODIGO as MENSCODI,\r\n  :DESCRIPCION as MENSDESC,\r\n  ''EPM'' as MENSDIVI,\r\n  ''CUZ'' as MENSMODU,\r\n  :CAUSA as MENSCAUS,\r\n  :SOLUCION  as MENSPOSO\r\n  FROM DUAL) B\r\nON (A.MENSDIVI = B.MENSDIVI and A.MENSMODU = B.MENSMODU and A.MENSCODI = B.MENSCODI)\r\nWHEN NOT MATCHED THEN \r\nINSERT (\r\n  MENSCODI, MENSDESC, MENSDIVI, MENSMODU, MENSCAUS, \r\n  MENSPOSO)\r\nVALUES (\r\n  B.MENSCODI, B.MENSDESC, B.MENSDIVI, B.MENSMODU, B.MENSCAUS, \r\n  B.MENSPOSO)\r\nWHEN MATCHED THEN\r\nUPDATE SET \r\n  A.MENSDESC = B.MENSDESC,\r\n  A.MENSCAUS = B.MENSCAUS,\r\n  A.MENSPOSO = B.MENSPOSO;\r\n\r\nCOMMIT;\r\n', '99', 'mrgmensaje')"
                };

                foreach (string sql in query)
                {
                    try
                    {
                        SqliteDAO.pExecuteNonQuery(sql);
                    }
                    catch (Exception ex) { }
                }

                SqliteDAO.pActualizaVersion("1.1.6.8");
            }

            if (!SqliteDAO.pblValidaVersion("1.1.6.9"))
            {
                string[] query =
                 {
                    "INSERT INTO html (name, documentation, company, filename) VALUES ('CODIGO_MENSAJE', 'SELECT max(menscodi) nuCodigo \r\nFROM flex.mensaje  \r\nWHERE mensdivi = ''EPM'' \r\nAND mensmodu = ''CUZ'' \r\nAND menscodi < 900196\r\n', '99', '')"
                };

                foreach (string sql in query)
                {
                    try
                    {
                        SqliteDAO.pExecuteNonQuery(sql);
                    }
                    catch (Exception ex) { }
                }

                SqliteDAO.pActualizaVersion("1.1.6.9");
            }

            if (!SqliteDAO.pblValidaVersion("1.1.7.5"))
            {
                string[] query =
                 {
                    "update userbd set password = 'Fl3xv8Dll0_0987' where user = 'FLEX'",
                    "update userbd set password = 'CusT0v8Dll0_0987' where user = 'FLEX_CUSTOMIZACION'",
                    "update userbd set password = 'Op3n$is1usdllo' where user = 'OPENSIRIUS'"
                };

                foreach (string sql in query)
                {
                    try
                    {
                        SqliteDAO.pExecuteNonQuery(sql);
                    }
                    catch (Exception ex) { }
                }

                SqliteDAO.pActualizaVersion("1.1.7.5");
            }

            if (!SqliteDAO.pblValidaVersion("1.1.7.8"))
            {
                string[] query =
                 {
                    "create table cy_userbd( codigo integer primary key,  user_        varchar2(50),    password_    varchar2(1000),    basedatos   varchar2(100),    servidor    varchar2(100),    puerto      varchar2(100))",
                    "Insert into CY_USERBD   (codigo,USER_, PASSWORD_, BASEDATOS, SERVIDOR, PUERTO) Values   (1,'sql_mvm', 'N0M30LVid3s+-', 'SFDLLO', 'EPM-DO13', '1521')",
                    "Insert into CY_USERBD   (codigo,USER_, PASSWORD_, BASEDATOS, SERVIDOR, PUERTO) Values   (2,'sql_mvm', 'U6UdkBwxk5Ezw8', 'SFUAT', 'EPM-TO34', '1521')",
                    "Insert into CY_USERBD   (codigo,USER_, PASSWORD_, BASEDATOS, SERVIDOR, PUERTO) Values   (3,'sql_mvm', 'N0M30LVid3s+-', 'SFPDN', 'epmpo34-01', '1521')",
                    "INSERT INTO html (name, documentation, company, filename) VALUES ('PLANTILLA_FUENTES', 'DECLARE\r\n    PROCEDURE pObtFuentes\r\n    (\r\n        isbNombre   IN VARCHAR2,\r\n        isbOwner    IN VARCHAR2,\r\n        oclObjeto   OUT CLOB\r\n    )\r\n    IS\r\n        sbText      VARCHAR2(4000);\r\n        \r\n        CURSOR cuDatos\r\n        IS\r\n            SELECT text\r\n            FROM dba_source \r\n            WHERE NAME = isbNombre\r\n            AND owner = isbOwner\r\n            ORDER BY type,line;\r\n    BEGIN\r\n        dbms_lob.createtemporary(lob_loc => oclObjeto, cache => true, dur => dbms_lob.session);\r\n        \r\n        OPEN cuDatos;\r\n        LOOP\r\n            FETCH cuDatos INTO sbText;\r\n            EXIT WHEN cuDatos%NOTFOUND;\r\n            \r\n            DBMS_LOB.APPEND(oclObjeto, sbText);\r\n            \r\n        END LOOP;\r\n        CLOSE cuDatos;\r\n    END;\r\nBEGIN\r\n    pObtFuentes(:isbNombre,:isbOwner,:oclObjeto);\r\nEND;\r\n', '99', '')"
                };

                foreach (string sql in query)
                {
                    try
                    {
                        SqliteDAO.pExecuteNonQuery(sql);
                    }
                    catch (Exception ex) { }
                }

                SqliteDAO.pActualizaVersion("1.1.7.8");
            }

            if (!SqliteDAO.pblValidaVersion("1.1.8.2"))
            {
                string[] query =
                 {
                    "update cy_userbd set password_ = 's0LIT0P4R4MVM++' where codigo = 3"
                };

                foreach (string sql in query)
                {
                    try
                    {
                        SqliteDAO.pExecuteNonQuery(sql);
                    }
                    catch (Exception ex) { }
                }

                SqliteDAO.pActualizaVersion("1.1.8.2");
            }

            if (!SqliteDAO.pblValidaVersion("1.1.8.7"))
            {
                string[] query =
                 {
                    //SFPDN
                    "update cy_userbd set password_ = 'N0M3Vay4aBloqu34r-+' where codigo = 3"
                };

                foreach (string sql in query)
                {
                    try
                    {
                        SqliteDAO.pExecuteNonQuery(sql);
                    }
                    catch (Exception ex) { }
                }

                SqliteDAO.pActualizaVersion("1.1.8.7");
            }

            if (!SqliteDAO.pblValidaVersion("1.1.8.8"))
            {
                string[] query =
                 {
                    "INSERT INTO html (documentation) VALUES ('declare\r\n    PROCEDURE pGenerapktbl\r\n    (\r\n        isbTabla IN VARCHAR2,\r\n        isbOwner IN VARCHAR2,\r\n        isOrder  IN VARCHAR2,\r\n        oclFile  OUT CLOB,\r\n        onuErrorCode    OUT NUMBER,\r\n        osbErrorMessage OUT VARCHAR2 \r\n    )\r\n    IS    \r\n    \r\n        csbTABLA            varchar2( 100 ) := isbTabla;\r\n        csbOWNER            varchar2( 100 ) := isbOwner;\r\n        csbWO               varchar2( 100 ) := isOrder;\r\n        csbEXISTE           constant number := 12202;\r\n        csbNO_EXISTE        constant number := 12201;\r\n        csbRUTA_ARCHIVO     constant varchar2( 200 ) := ''/output/traza'';\r\n        \r\n        -- Variable para construir funciones de campos\r\n        sbFunction              VARCHAR2(32000);\r\n        -- Parámetros de entrada de llave primaria como argumentos de entrada\r\n        sbParamPK               VARCHAR2(2000);        \r\n        -- Parámetros de entrada de la PK\r\n        sbVariablesPK           VARCHAR2(2000);\r\n        -- Listado de variables de entrada que componen la PK, para imprimirse en mensajes\r\n        sbCamposPKParaOutput    VARCHAR2(2000);\r\n        -- Listado de variables de entrada que componen la PK, para imprimirse en mensajes (Encomillada)\r\n        sbCamposPKParaOutputCom VARCHAR2(2000);\r\n        -- Campos igualados a la variable\r\n        sbWherePorPK            VARCHAR2(2000);                \r\n        \r\n        -- Cascarón para la especificación de una función\r\n        csbSpecTemplateFunction   VARCHAR2(32000) :=\r\n''\r\n    -- Obtención del campo <Campo>\r\n    FUNCTION <Type>Get<Campo>\r\n    (\r\n        <ParamPK>\r\n        INUCACHE    IN  NUMBER  DEFAULT 1\r\n    )\r\n    RETURN <Tabla>.<Campo>%TYPE;\r\n'';\r\n        \r\n        -- Cascarón para una función de obtención por campo\r\n        csbTemplateFunction   VARCHAR2(32000) := \r\n''\r\n    -- Obtención del campo <Campo>\r\n    FUNCTION <Type>Get<Campo>\r\n    (\r\n        <ParamPK>\r\n        INUCACHE    IN  NUMBER  DEFAULT 1\r\n    )\r\n    RETURN <Tabla>.<Campo>%TYPE\r\n    IS\r\n    BEGIN\r\n        pkErrors.Push(''''pktbl<Tabla>.<Type>Get<Campo>'''');\r\n        \r\n        -- Valida si el dato está en memoria\r\n        \r\n        AccKey\r\n        ( \r\n            <pk>    INUCACHE \r\n        );\r\n        \r\n        pkErrors.pop;\r\n        \r\n        -- Obtiene el dato\r\n        RETURN (rc<Tabla>.<Campo>);\r\n    EXCEPTION\r\n        WHEN LOGIN_DENIED THEN\r\n            pkErrors.Pop;\r\n            RAISE LOGIN_DENIED;\r\n    END <Type>Get<Campo>;\r\n'';\r\n\r\n        -- Cascarón para la especificación de un procedimiento update\r\n        csbSpecTemplateProc   VARCHAR2(32000) :=\r\n''\r\n    -- Actualización del campo <Campo>\r\n    PROCEDURE pUpd<Campo>\r\n    (\r\n        <ParamPK>\r\n        <ParamCampo>\r\n    );\r\n'';\r\n\r\n        -- Cascarón para un procedimiento de actualización por campo\r\n        csbTemplateUpdate   VARCHAR2(32000) := \r\n''\r\n    -- Actualización del campo <Campo>\r\n    PROCEDURE pUpd<Campo>\r\n    (\r\n        <ParamPK>\r\n        <ParamCampo>\r\n    )\r\n    IS\r\n    BEGIN\r\n        pkErrors.Push(''''pktbl<Tabla>.pUpd<Campo>'''');\r\n        \r\n        UPDATE  <Tabla>\r\n        SET     <Campo> = <AliasCampo>\r\n        WHERE   <Condicion>;\r\n        \r\n        IF (SQL%NOTFOUND) THEN\r\n            pkErrors.pop;\r\n            RAISE NO_DATA_FOUND;\r\n        END IF;\r\n        \r\n        -- Actualiza la copia en memoria\r\n        rc<Tabla>.<Campo> := <AliasCampo>;\r\n        \r\n        pkErrors.pop;\r\n        \r\n    EXCEPTION\r\n        WHEN NO_DATA_FOUND THEN\r\n            pkErrors.SetErrorCode( csbDIVISION, csbMODULE, cnuRECORD_NO_EXISTE );\r\n            pkErrors.ADDSUFFIXTOMESSAGE ( csbTABLA_PK||''||''<sbCamposPKParaOutputSinCom>||''''''||''] )''||CHR(39)||'');\r\n            RAISE LOGIN_DENIED;\r\n    END pUpd<Campo>;\r\n'';\r\n        \r\n        gsbTableCap     varchar2( 100 );  \r\n    \r\n        CURSOR cuPrimaria IS\r\n            select  --+ ordered\r\n                    tcol.table_name, tcol.column_name, DECODE(tcol.data_type,''TIMESTAMP(6)'', substr(tcol.data_type,1,INSTR(tcol.data_type,''('')-1),tcol.data_type) data_type, tcol.data_length, tcol.data_precision, tcol.data_scale,\r\n                    ''i'' || decode( tcol.data_type, ''NUMBER'', ''nu'', ''VARCHAR2'', ''sb'', ''DATE'', ''dt'', ''BOOLEAN'', ''bo'', ''CLOB'', ''cl'', ''BLOB'', ''bl'', ''XMLTYPE'', ''xm'',''TIMESTAMP(6)'',''ts'' ) || substr( tcol.column_name, 1, 1 ) || lower( substr( tcol.column_name, 2 ) ) alias,\r\n                    ''i'' || decode( tcol.data_type, ''NUMBER'', ''nu'', ''VARCHAR2'', ''sb'', ''DATE'', ''dt'', ''BOOLEAN'', ''bo'', ''CLOB'', ''cl'', ''BLOB'', ''bl'', ''XMLTYPE'', ''xm'',''TIMESTAMP(6)'',''ts'' ) || substr( tcol.column_name, 1, 1 ) || lower( substr( tcol.column_name, 2 ) ) || '' '' || ''IN'' || '' '' || lower( tcol.table_name || ''.'' || tcol.column_name) || ''%TYPE''  param_entrada\r\n            from    all_constraints cons, all_cons_columns ccol, all_tab_columns tcol\r\n            where   cons.table_name = upper( csbTABLA )\r\n            and     cons.constraint_type = ''P''\r\n            and     cons.owner = upper( csbOWNER )\r\n            and     ccol.owner = cons.owner\r\n            and     ccol.constraint_name = cons.constraint_name\r\n            and     ccol.table_name = cons.table_name\r\n            and     tcol.owner = ccol.owner\r\n            and     tcol.table_name = ccol.table_name\r\n            and     tcol.column_name = ccol.column_name\r\n            order by ccol.position;\r\n            \r\n            \r\n        CURSOR cuCampos IS\r\n            select  ------+ ordered\r\n                    tcol.table_name, tcol.column_name, lower( tcol.column_name ) alias, DECODE(data_type,''TIMESTAMP(6)'', substr(data_type,1,INSTR(data_type,''('')-1),data_type) data_type,\r\n                    ''i'' || decode( data_type, ''NUMBER'', ''nu'', ''VARCHAR2'', ''sb'', ''DATE'', ''dt'', ''BOOLEAN'', ''bo'', ''CLOB'', ''cl'', ''BLOB'', ''bl'', ''XMLTYPE'', ''xm'',''TIMESTAMP(6)'',''ts'' ) || substr( tcol.column_name, 1, 1 ) || lower( substr( tcol.column_name, 2 ) ) param_alias,\r\n                    ''i'' || decode( data_type, ''NUMBER'', ''nu'', ''VARCHAR2'', ''sb'', ''DATE'', ''dt'', ''BOOLEAN'', ''bo'', ''CLOB'', ''cl'', ''BLOB'', ''bl'', ''XMLTYPE'', ''xm'',''TIMESTAMP(6)'',''ts'' ) || substr( tcol.column_name, 1, 1 ) || lower( substr( tcol.column_name, 2 ) ) || '' '' || ''IN'' || '' '' || lower( tcol.table_name || ''.'' || tcol.column_name) || ''%TYPE''  param_entrada\r\n            from    all_tab_columns tcol\r\n            where   tcol.table_name = upper( csbTABLA )\r\n            and     tcol.owner = upper( csbOWNER )\r\n            ORDER BY column_id;\r\n                    \r\n        TYPE tytbPrimaria IS TABLE OF cuPrimaria%rowtype INDEX BY binary_integer;\r\n        TYPE tytbCampos IS TABLE OF cuCampos%rowtype INDEX BY binary_integer;\r\n        \r\n        flArchivo       utl_file.file_type;\r\n        tbPrimaria      tytbPrimaria;\r\n        tbCampos        tytbCampos;\r\n        rcPrimaria      cuPrimaria%rowtype;\r\n        sbExiste        varchar2( 1 );    \r\n        sbCadena        varchar2( 32767 );\r\n        sbUser          varchar2( 20 );\r\n        sbTipoDato      varchar2( 20 );    \r\n        \r\n        FUNCTION fsbTipoDato ( \r\n            isbTipoDato     IN  VARCHAR2,\r\n            iboIsTable      IN  BOOLEAN DEFAULT FALSE,\r\n            iboIsFunction   IN  BOOLEAN DEFAULT FALSE\r\n        )\r\n        RETURN VARCHAR2\r\n        IS\r\n            sbToken     VARCHAR2(20) := NULL;\r\n            sbPrefijo   VARCHAR2(1) := ''i'';\r\n        BEGIN            \r\n                \r\n            -- Si es para una función, inicia con f\r\n            IF (iboIsFunction) THEN\r\n                sbPrefijo := ''f'';\r\n            END IF;\r\n        \r\n            -- Si es tipo para una tabla, siempre es tb\r\n            IF (iboIsTable) THEN\r\n                sbToken := sbPrefijo||''tb'';\r\n            ELSE\r\n                -- Selecciona según el tipo de dato\r\n                CASE UPPER(isbTipoDato) \r\n                    WHEN ''NUMBER'' THEN\r\n                        sbToken := sbPrefijo||''nu'';\r\n                    WHEN ''VARCHAR2'' THEN\r\n                        sbToken := sbPrefijo||''sb'';\r\n                    WHEN ''CHAR'' THEN\r\n                        sbToken := sbPrefijo||''sb'';\r\n                    WHEN ''DATE'' THEN\r\n                        sbToken := sbPrefijo||''dt'';\r\n                    WHEN ''CLOB'' THEN\r\n                        sbToken := sbPrefijo||''cl'';\r\n                    WHEN ''BLOB'' THEN\r\n                        sbToken := sbPrefijo||''bl'';\r\n                    WHEN ''XMLTYPE'' THEN\r\n                        sbToken := sbPrefijo||''xm'';\r\n                    WHEN ''TIMESTAMP'' THEN\r\n                        sbToken := sbPrefijo||''ts'';    \r\n                END CASE;\r\n            END IF;\r\n            RETURN sbToken;   \r\n        END;\r\n        \r\n        /***************************************************************************\r\n        <Procedure Fuente=\"Propiedad Intelectual de Empresas Públicas de Medellín\">\r\n          <Unidad>fboCampoEnPrimaryKey</Unidad>\r\n          <Descripcion>\r\n                Indica si un campo está en la llave primaria\r\n          </Descripcion>\r\n          <Autor>Diego Fernando Coba - MVM Ingenieria de Software</Autor>\r\n          <Fecha> 03-Mar-2020 </Fecha>\r\n          <Parametros>\r\n            <param nombre=\"param1\" tipo=\"TYPE\" Direccion=\"In/Out\" >\r\n                Descripción\r\n            </param>\r\n            <param nombre=\"param2\" tipo=\"TYPE\" Direccion=\"In/Out\" >\r\n                Descripción\r\n            </param>\r\n            <param nombre=\"param3\" tipo=\"TYPE\" Direccion=\"In/Out\" >\r\n                Descripción\r\n            </param>\r\n          </Parametros>\r\n          <Retorno Nombre=\"boEstaEnPK\" Tipo=\"BOOLEAN\">\r\n                Indica si el campo está en la llave primaria\r\n          </Retorno>\r\n          <Historial>\r\n            <Modificacion Autor=\"dcoba\" Fecha=\"03-Mar-2020\" Inc=\"\">\r\n                Creación.\r\n            </Modificacion>\r\n          </Historial>\r\n        </Procedure>\r\n        ***************************************************************************/\r\n        FUNCTION fboCampoEnPrimaryKey \r\n        (\r\n            itbLlavePrimaria    IN  tytbPrimaria,\r\n            isbCampo            IN  all_tab_columns.COLUMN_NAME%TYPE\r\n        )\r\n        RETURN BOOLEAN\r\n        IS       \r\n            /* Indica si el campo está en la llave primaria */\r\n            boEstaEnPK          BOOLEAN := FALSE;\r\n            \r\n            nuIndex             BINARY_INTEGER;\r\n            \r\n        BEGIN                                  \r\n\r\n            /* Recorre la colección de registros */\r\n            nuIndex := itbLlavePrimaria.FIRST;\r\n            \r\n            LOOP\r\n                EXIT WHEN nuIndex IS NULL;\r\n                \r\n                /* Si el campo está en la PK retorna TRUE */\r\n                IF ( itbLlavePrimaria(nuIndex).column_name = isbCampo ) THEN\r\n                    boEstaEnPK := TRUE;\r\n                    EXIT;\r\n                END IF;\r\n                    \r\n                /* Avanza al siguiente registro */\r\n                nuIndex := itbLlavePrimaria.NEXT(nuIndex);\r\n            \r\n            END LOOP;   \r\n        \r\n            RETURN boEstaEnPK;\r\n                \r\n        EXCEPTION\r\n            WHEN Epm_Errors.EX_CTRLERROR THEN\r\n                RAISE;\r\n            WHEN OTHERS THEN\r\n                Epm_Errors.SetError;\r\n                RAISE Epm_Errors.EX_CTRLERROR;\r\n        END fboCampoEnPrimaryKey; \r\n        \r\n    BEGIN\r\n        dbms_lob.createtemporary(lob_loc => oclFile, cache => true, dur => dbms_lob.session);\r\n        --oclFile := NULL; --EMPTY_CLOB();\r\n        --DBMS_LOB.APPEND(oclFile, CHR(10)||''PRUEBA'');\r\n        onuErrorCode := 0;\r\n        osbErrorMessage := 1;\r\n        \r\n        dbms_output.enable( 1000000 );\r\n    \r\n        BEGIN\r\n            select  ''x''\r\n            into    sbExiste\r\n            from    all_tables\r\n            where   table_name = upper( csbTABLA )\r\n            and     owner = upper( csbOWNER )\r\n            ;\r\n        EXCEPTION\r\n            when NO_DATA_FOUND then\r\n                onuErrorCode := 101;\r\n                osbErrorMessage := ''La tabla no existe'';\r\n                dbms_output.put_line( ''La tabla no existe'' );\r\n                raise;\r\n        END;    \r\n        \r\n        gsbTableCap := upper( substr( csbTABLA, 1, 1 ) ) || lower( substr( csbTABLA, 2 ) );\r\n        \r\n        SELECT  USER usuario_exec\r\n        INTO    sbUser\r\n        FROM    dual;    \r\n        \r\n        if ( cuPrimaria%isopen ) then\r\n            close cuPrimaria;\r\n        end if;\r\n        open cuPrimaria;\r\n        fetch cuPrimaria bulk collect into tbPrimaria;\r\n        close cuPrimaria;\r\n        \r\n        if ( cuCampos%isopen ) then\r\n            close cuCampos;\r\n        end if;\r\n        open cuCampos;\r\n        fetch cuCampos bulk collect into tbCampos;\r\n        close cuCampos;\r\n        \r\n        --flArchivo := utl_file.fopen( csbRUTA_ARCHIVO, ''PKTBL'' || upper( csbTABLA ) || ''.sql'', ''w'', 32767 );\r\n        \r\n        DBMS_LOB.APPEND(oclFile,\r\n''CREATE OR REPLACE PACKAGE pktbl'' || gsbTableCap || ''\r\nIS\r\n/**************************************************************************\r\n    Copyright (c) 2020 EPM - Empresas Públicas de Medellín\r\n    Archivo generado automaticamente.\r\n    ''|| sbUser ||'' - MVM Ingeniería de Software S.A.S.\r\n            \r\n    Nombre      :   pktbl'' || gsbTableCap || ''\r\n    Descripción :   Paquete de primer nivel, para la tabla '' || upper( csbTABLA ) || ''\r\n    Autor       :   Generador automatico paquetes de primer nivel.\r\n    Fecha       :   '' || to_char( sysdate, ''dd/mm/yyyy'' ) || ''\r\n    WO          :   '' || csbWO || ''\r\n            \r\n    Historial de Modificaciones\r\n    ---------------------------------------------------------------------------\r\n    Fecha         Autor         Descripcion\r\n    =====         =======       ===============================================\r\n***************************************************************************/\r\n                \r\n    --------------------------------------------\r\n    --  Type and Subtypes\r\n    --------------------------------------------'');\r\n        \r\n        if( tbCampos.first is not null ) then            \r\n            DBMS_LOB.APPEND(oclFile, CHR(10)||''\r\n    -- Define colecciones de cada columna de la tabla '' || gsbTableCap);\r\n        \r\n            for i in tbCampos.first .. tbCampos.last loop            \r\n\r\n                    DBMS_LOB.APPEND(oclFile, ''\r\n    TYPE ty''||tbCampos( i ).column_name||'' IS TABLE OF ''||gsbTableCap||''.''||tbCampos( i ).column_name||''%TYPE INDEX BY BINARY_INTEGER;'');\r\n\r\n            end loop;\r\n        \r\n            DBMS_LOB.APPEND(oclFile, CHR(10)||''\r\n    -- Define registro de colecciones'');\r\n\r\n            DBMS_LOB.APPEND(oclFile,''\r\n    TYPE tytb''||gsbTableCap||'' IS RECORD\r\n    ('');\r\n        \r\n            for i in tbCampos.first .. tbCampos.last loop            \r\n                if ( i <> tbCampos.last ) then\r\n                    sbCadena := sbCadena ||''\r\n        ''||tbCampos( i ).column_name||''  ty''||tbCampos( i ).column_name||'','';\r\n                else\r\n                    sbCadena := sbCadena ||''\r\n        ''||tbCampos( i ).column_name||''  ty''||tbCampos( i ).column_name;\r\n                end if;\r\n            END loop;\r\n            \r\n            DBMS_LOB.APPEND(oclFile, sbCadena||''\r\n    );'');\r\n        end if;\r\n    \r\n    DBMS_LOB.APPEND(oclFile,''\r\n    --------------------------------------------\r\n    -- Constants\r\n    --------------------------------------------\r\n        \r\n    --------------------------------------------\r\n    -- Variables\r\n    --------------------------------------------'');\r\n        \r\n        \r\n        if( tbPrimaria.first is not null ) then\r\n            DBMS_LOB.APPEND(oclFile, CHR(10)||''\r\n    -- Cursor para accesar '' || gsbTableCap || ''\r\n    CURSOR cu'' || gsbTableCap || ''\r\n    ('');\r\n        \r\n            for i in tbPrimaria.first .. tbPrimaria.last loop\r\n                sbCadena := tbPrimaria( i ).param_entrada;\r\n                if ( i <> tbPrimaria.first ) then\r\n                    sbCadena := '',''||''\r\n        ''||sbCadena;\r\n                ELSE\r\n                    sbCadena := ''\r\n        ''||sbCadena;\r\n                end if;\r\n                DBMS_LOB.APPEND(oclFile,sbCadena);\r\n            end loop;\r\n            \r\n            DBMS_LOB.APPEND(oclFile,''\r\n    )\r\n    IS\r\n        SELECT  *\r\n        FROM    '' || lower( csbTABLA ));\r\n            \r\n            for i in tbPrimaria.first .. tbPrimaria.last loop\r\n                if ( i = tbPrimaria.first ) then\r\n                    sbCadena := ''\r\n        WHERE   '';\r\n                else\r\n                    sbCadena := ''\r\n        AND     '';\r\n                end if;\r\n            \r\n                sbCadena := sbCadena || lower( tbPrimaria( i ).column_name ) || '' = '' || tbPrimaria( i ).alias;\r\n                if ( i = tbPrimaria.last ) then\r\n                    sbCadena := sbCadena || '';'';\r\n                end if;\r\n                DBMS_LOB.APPEND(oclFile, sbCadena);\r\n            end loop;\r\n            \r\n        end if;\r\n        \r\n        DBMS_LOB.APPEND(oclFile, CHR(10)|| ''\r\n    --------------------------------------------\r\n    -- Funciones y Procedimientos\r\n    --------------------------------------------\r\n    -- Insertar un registro\r\n    PROCEDURE InsRecord\r\n    (\r\n        ircRecord in '' || lower( csbTABLA ) || ''%rowtype\r\n    );'');\r\n        \r\n        DBMS_LOB.APPEND(oclFile, CHR(10)|| ''\r\n    -- Insertar colección de registros\r\n    PROCEDURE InsRecords\r\n    (\r\n        irctbRecord  IN OUT NOCOPY   tytb''||gsbTableCap||''\r\n    );'');\r\n            \r\n        DBMS_LOB.APPEND(oclFile, CHR(10)|| ''\r\n    -- Insertar un record de tablas por columna\r\n    PROCEDURE InsForEachColumn\r\n    ('');\r\n        \r\n        for i in tbCampos.first .. tbCampos.last loop     \r\n            sbTipoDato := fsbTipoDato( tbCampos( i ).data_type );       \r\n            if ( i <> tbCampos.last ) then                              \r\n                DBMS_LOB.APPEND(oclFile, CHR(10)||          \r\n        ''       ''||sbTipoDato||tbCampos( i ).column_name||'' IN ''||lower( csbTABLA )||''.''||tbCampos( i ).column_name||''%TYPE,'');               \r\n            else\r\n                DBMS_LOB.APPEND(oclFile, CHR(10)||          \r\n        ''       ''||sbTipoDato||tbCampos( i ).column_name||'' IN ''||lower( csbTABLA )||''.''||tbCampos( i ).column_name||''%TYPE'');\r\n            end if;    \r\n        end loop;\r\n        \r\n        DBMS_LOB.APPEND(oclFile, CHR(10)||\r\n''    );'');\r\n        \r\n        DBMS_LOB.APPEND(oclFile, CHR(10)|| ''\r\n    -- Insertar un record de tablas por columna masivamente\r\n    PROCEDURE InsForEachColumnBulk\r\n    ('');\r\n        \r\n        for i in tbCampos.first .. tbCampos.last loop     \r\n            sbTipoDato := fsbTipoDato( tbCampos( i ).data_type , TRUE);       \r\n            if ( i <> tbCampos.last ) then                              \r\n                DBMS_LOB.APPEND(oclFile, CHR(10)||          \r\n        ''       ''||sbTipoDato||tbCampos( i ).column_name||'' IN OUT NOCOPY ty''||tbCampos( i ).column_name||'','');               \r\n            else\r\n                DBMS_LOB.APPEND(oclFile, CHR(10)||          \r\n        ''       ''||sbTipoDato||tbCampos( i ).column_name||'' IN OUT NOCOPY ty''||tbCampos( i ).column_name);\r\n            end if;    \r\n        end loop;\r\n        \r\n        DBMS_LOB.APPEND(oclFile, CHR(10)||\r\n''    );'');    \r\n            \r\n        if( tbPrimaria.first is not null ) then\r\n        \r\n            DBMS_LOB.APPEND(oclFile, CHR(10)|| ''\r\n    -- Limpiar la memoria\r\n    PROCEDURE ClearMemory;\r\n\r\n    -- Eliminar un registro\r\n    PROCEDURE DelRecord\r\n    ('');\r\n        \r\n            for i in tbPrimaria.first .. tbPrimaria.last loop\r\n                sbCadena := tbPrimaria( i ).param_entrada;\r\n                if ( i <> tbPrimaria.last ) then\r\n                    sbCadena := sbCadena || '','';\r\n                end if;\r\n                DBMS_LOB.APPEND(oclFile, CHR(10)|| ''        '' || sbCadena);\r\n            end loop;\r\n    \r\n            DBMS_LOB.APPEND(oclFile, CHR(10)||\r\n''    );\r\n\r\n    -- Actualizar un registro\r\n    PROCEDURE UpRecord\r\n    (\r\n        ircRecord in '' || lower( csbTABLA ) || ''%rowtype\r\n    );\r\n        \r\n    -- Eliminar un grupo de registros\r\n    PROCEDURE DelRecords\r\n    ('');\r\n            for i in tbPrimaria.first .. tbPrimaria.last loop\r\n                sbTipoDato := fsbTipoDato( tbPrimaria( i ).data_type, TRUE );\r\n                if ( i <> tbPrimaria.last ) then\r\n                    DBMS_LOB.APPEND(oclFile, CHR(10)|| ''        '' || sbTipoDato||tbPrimaria( i ).column_name || '' IN OUT NOCOPY ty''||tbPrimaria( i ).column_name||'','');\r\n                else\r\n                    DBMS_LOB.APPEND(oclFile, CHR(10)|| ''        '' || sbTipoDato||tbPrimaria( i ).column_name || '' IN OUT NOCOPY ty''||tbPrimaria( i ).column_name);\r\n                end if;\r\n            end loop;\r\n        DBMS_LOB.APPEND(oclFile, ''     \r\n    );\r\n                \r\n    -- Indica si el registro existe\r\n    FUNCTION fblExist\r\n    ('');\r\n        \r\n            for i in tbPrimaria.first .. tbPrimaria.last loop\r\n                DBMS_LOB.APPEND(oclFile, CHR(10)|| ''        '' || tbPrimaria( i ).param_entrada || '','');\r\n            end loop;\r\n            DBMS_LOB.APPEND(oclFile, CHR(10)|| ''        inuCACHE IN NUMBER DEFAULT 1\r\n    )\r\n    RETURN BOOLEAN;\r\n    \r\n    -- Obtiene registro\r\n    FUNCTION frcGetRecord\r\n    ('');\r\n        \r\n            for i in tbPrimaria.first .. tbPrimaria.last loop\r\n                DBMS_LOB.APPEND(oclFile, CHR(10)|| ''        '' || tbPrimaria( i ).param_entrada || '','');\r\n            end loop;\r\n            \r\n            DBMS_LOB.APPEND(oclFile, CHR(10)|| ''        inuCACHE IN NUMBER DEFAULT 1\r\n    )\r\n    RETURN '' || lower( csbTABLA ) || ''%ROWTYPE;\r\n    \r\n    -- Valida si existe un registro\r\n    PROCEDURE AccKey\r\n    ('');\r\n        \r\n        for i in tbPrimaria.first .. tbPrimaria.last loop\r\n            DBMS_LOB.APPEND(oclFile, CHR(10)|| ''        '' || tbPrimaria( i ).param_entrada || '','');\r\n        end loop;\r\n            \r\n        DBMS_LOB.APPEND(oclFile, CHR(10)|| ''        inuCACHE IN NUMBER DEFAULT 1\r\n    );\r\n    \r\n    -- Valida si está duplicad\r\n    PROCEDURE ValidateDupValues\r\n    ('');\r\n        \r\n        for i in tbPrimaria.first .. tbPrimaria.last loop\r\n            DBMS_LOB.APPEND(oclFile, CHR(10)|| ''        '' || tbPrimaria( i ).param_entrada || '','');\r\n        end loop;\r\n            \r\n        DBMS_LOB.APPEND(oclFile, CHR(10)|| ''        inuCACHE IN NUMBER DEFAULT 1\r\n    );\r\n    '');        \r\n    \r\n        /* Recorre los campos de la PK para armar la lista de campos y de parámetros */\r\n        FOR i IN tbPrimaria.first .. tbPrimaria.last LOOP\r\n\r\n            IF (i = tbPrimaria.first ) THEN\r\n\r\n                    IF (i = tbPrimaria.last) THEN\r\n                        sbParamPK := tbPrimaria( i ).param_entrada||'','';\r\n                        sbWherePorPK := tbPrimaria(i).column_name||'' = ''||tbPrimaria( i ).alias;\r\n                    ELSE\r\n                        \r\n                        sbWherePorPK := tbPrimaria(i).column_name||'' = ''||tbPrimaria( i ).alias||CHR(10)||''        '';\r\n                    \r\n                        sbParamPK := tbPrimaria( i ).param_entrada||'',\r\n        '';\r\n                    END IF;\r\n                    \r\n                    sbVariablesPK := tbPrimaria( i ).alias||'',\r\n        '';        \r\n                    sbCamposPKParaOutput := tbPrimaria( i ).alias;                    \r\n\r\n            ELSIF (i = tbPrimaria.last) THEN\r\n        \r\n                    sbParamPK := sbParamPK ||tbPrimaria( i ).param_entrada||'','';\r\n                    \r\n                    sbVariablesPK := sbVariablesPK ||tbPrimaria( i ).alias||'',\r\n        '';                \r\n                    sbCamposPKParaOutput := sbCamposPKParaOutput||''||'''' - ''''||''||tbPrimaria( i ).alias;\r\n                    \r\n                    sbWherePorPK := tbPrimaria(i).column_name||'' = ''||tbPrimaria( i ).alias;\r\n            \r\n            ELSE\r\n                    sbParamPK := sbParamPK ||tbPrimaria( i ).param_entrada||'',\r\n        '';                \r\n                    sbVariablesPK := sbVariablesPK ||tbPrimaria( i ).alias||'',\r\n        '';                \r\n                    sbCamposPKParaOutput := sbCamposPKParaOutput||''||'''' - ''''||''||tbPrimaria( i ).alias;\r\n                    \r\n                    sbWherePorPK := tbPrimaria(i).column_name||'' = ''||tbPrimaria( i ).alias||CHR(10)||''        '';\r\n        \r\n            END IF;\r\n                                \r\n        END LOOP;\r\n        \r\n        /* Prepara la variable para incrustarse en texto */\r\n        sbCamposPKParaOutputCom := CHR(39)||''||''||sbCamposPKParaOutput||''||''||CHR(39);\r\n        \r\n        /* Recorre los campos creando las funciones para obtener campos puntuales */\r\n        FOR i in tbCampos.FIRST .. tbCampos.LAST LOOP    \r\n\r\n            -- No crea método para obtener o actualizar pk\r\n            IF ( fboCampoEnPrimaryKey( tbPrimaria, tbCampos(i).column_name )) THEN\r\n                CONTINUE;\r\n            END IF;\r\n                     \r\n            -- Reemplaza el nombre de la tabla\r\n            sbFunction := REPLACE(csbSpecTemplateFunction, ''<Tabla>'', Initcap(csbTABLA));                    \r\n                            \r\n            -- Reemplaza el nombre del campo\r\n            sbFunction := REPLACE(sbFunction, ''<Campo>'', Initcap(tbCampos(i).column_name));\r\n                            \r\n            -- Reemplazan parámetros de entrada que son campos de la PK\r\n            sbFunction := REPLACE(sbFunction, ''<ParamPK>'', sbParamPK);\r\n\r\n            -- Reemplaza el tipo de función según el tipo de dato\r\n            sbFunction := REPLACE(sbFunction, ''<Type>'', fsbTipoDato(tbCampos(i).data_type , FALSE, TRUE) );\r\n\r\n            -- Escribe la función\r\n            DBMS_LOB.APPEND(oclFile, sbFunction);\r\n\r\n        END LOOP;\r\n        \r\n        /* Recorre los campos creando las funciones para obtener campos puntuales */\r\n        FOR i in tbCampos.FIRST .. tbCampos.LAST LOOP    \r\n\r\n            -- No crea método para obtener o actualizar pk\r\n            IF ( fboCampoEnPrimaryKey( tbPrimaria, tbCampos(i).column_name )) THEN\r\n                CONTINUE;\r\n            END IF;\r\n                       \r\n            -- Reemplaza el nombre de la tabla\r\n            sbFunction := REPLACE(csbSpecTemplateProc, ''<Campo>'', Initcap(tbCampos(i).column_name) );                    \r\n                            \r\n            -- Reemplazan parámetros de entrada que son campos de la PK\r\n            sbFunction := REPLACE(sbFunction, ''<ParamPK>'', sbParamPK);\r\n\r\n            -- Reemplaza el parámetro de entrada el campo\r\n            sbFunction := REPLACE(sbFunction, ''<ParamCampo>'', tbCampos(i).param_entrada );\r\n\r\n            -- Escribe la función\r\n            DBMS_LOB.APPEND(oclFile, sbFunction);\r\n\r\n        END LOOP;        \r\n    \r\n        end if; -- Si tiene PK\r\n        \r\n        DBMS_LOB.APPEND(oclFile, CHR(10)||CHR(10)||''END pktbl'' || gsbTableCap || '';''||CHR(10)||''/''||CHR(10)||''CREATE OR REPLACE PACKAGE BODY pktbl'' || gsbTableCap || ''\r\nIS    \r\n    -------------------------\r\n    --  PRIVATE VARIABLES\r\n    -------------------------'');\r\n        \r\n        if( tbPrimaria.first is not null ) then\r\n            DBMS_LOB.APPEND(oclFile, CHR(10)||''\r\n    -- Record Tabla '' || upper( csbTABLA ) || ''\r\n    rc'' || gsbTableCap || '' cu'' || gsbTableCap || ''%ROWTYPE;\r\n    \r\n    -- Record nulo de la Tabla '' || upper( csbTABLA ) || ''\r\n    rcRecordNull '' || lower( csbTABLA ) || ''%ROWTYPE;\r\n        \r\n    -------------------------\r\n    --   PRIVATE METHODS   \r\n    -------------------------\r\n        \r\n    PROCEDURE Load\r\n    ('');\r\n        \r\n        for i in tbPrimaria.first .. tbPrimaria.last loop\r\n            sbCadena := tbPrimaria( i ).param_entrada;\r\n            if ( i <> tbPrimaria.last ) then\r\n                sbCadena := sbCadena || '','';\r\n            end if;\r\n            DBMS_LOB.APPEND(oclFile, CHR(10)|| ''        '' || sbCadena);\r\n        end loop;\r\n        DBMS_LOB.APPEND(oclFile, ''\r\n    );\r\n        \r\n    PROCEDURE LoadRecord\r\n    ('');\r\n        \r\n        for i in tbPrimaria.first .. tbPrimaria.last loop\r\n            sbCadena := tbPrimaria( i ).param_entrada;\r\n            if ( i <> tbPrimaria.last ) then\r\n                sbCadena := sbCadena || '','';\r\n            end if;\r\n            DBMS_LOB.APPEND(oclFile, CHR(10)|| ''        '' || sbCadena);\r\n        end loop;\r\n        DBMS_LOB.APPEND(oclFile,''\r\n    );\r\n        \r\n    FUNCTION fblInMemory\r\n    ('');\r\n        \r\n        for i in tbPrimaria.first .. tbPrimaria.last loop\r\n            sbCadena := tbPrimaria( i ).param_entrada;\r\n            if ( i <> tbPrimaria.last ) then\r\n                sbCadena := sbCadena || '','';\r\n            end if;\r\n            DBMS_LOB.APPEND(oclFile, CHR(10)|| ''        '' || sbCadena);\r\n        end loop;\r\n        DBMS_LOB.APPEND(oclFile, ''\r\n    )\r\n    RETURN BOOLEAN;'');\r\n        \r\n        end if;\r\n        \r\n        DBMS_LOB.APPEND(oclFile, CHR(10)|| ''\r\n    -----------------\r\n    -- CONSTANTES\r\n    -----------------\r\n    CACHE                      CONSTANT NUMBER := 1;   -- Buscar en Cache\r\n    \r\n    -------------------------\r\n    --  PRIVATE CONSTANTS\r\n    -------------------------\r\n    cnuRECORD_NO_EXISTE        CONSTANT NUMBER := '' || csbNO_EXISTE || ''; -- Reg. no esta en BD\r\n    cnuRECORD_YA_EXISTE        CONSTANT NUMBER := '' || csbEXISTE || ''; -- Reg. ya esta en BD    \r\n    -- Division\r\n    csbDIVISION                CONSTANT VARCHAR2(20) := pkConstante.csbDIVISION;\r\n    -- Modulo\r\n    csbMODULE                  CONSTANT VARCHAR2(20) := pkConstante.csbMOD_CUZ;\r\n    -- Texto adicionar para mensaje de error\r\n    csbTABLA_PK                CONSTANT VARCHAR2(200):= ''''(Tabla ''||upper( csbTABLA )||'') ( PK ['''';\r\n    csb_TABLA                  CONSTANT VARCHAR2(200):= ''''(Tabla ''||upper( csbTABLA )||'')'''';'');\r\n\r\n        \r\n        if( tbPrimaria.first is not null ) then\r\n            DBMS_LOB.APPEND(oclFile, CHR(10)|| ''\r\n    -- Carga\r\n    PROCEDURE Load\r\n    ('');\r\n        \r\n        for i in tbPrimaria.first .. tbPrimaria.last loop\r\n            sbCadena := tbPrimaria( i ).param_entrada;\r\n            if ( i <> tbPrimaria.last ) then\r\n                sbCadena := sbCadena || '','';\r\n            end if;\r\n            DBMS_LOB.APPEND(oclFile, CHR(10)|| ''        '' || sbCadena);\r\n        end loop;\r\n        DBMS_LOB.APPEND(oclFile, CHR(10)|| ''    )\r\n    IS\r\n    BEGIN\r\n        pkErrors.Push( ''''pktbl'' || gsbTableCap || ''.Load'''' );\r\n        LoadRecord\r\n        ('');\r\n            \r\n        for i in tbPrimaria.first .. tbPrimaria.last loop\r\n            sbCadena := tbPrimaria( i ).alias;\r\n            if ( i <> tbPrimaria.last ) then\r\n                sbCadena := sbCadena || '','';\r\n            end if;\r\n            DBMS_LOB.APPEND(oclFile, CHR(10)|| ''            '' || sbCadena);\r\n        end loop;\r\n            \r\n        DBMS_LOB.APPEND(oclFile, CHR(10)|| ''        );\r\n        -- Evalúa si se encontro el registro en la Base de datos\r\n        IF ( rc'' || gsbTableCap || ''.'' || lower( tbPrimaria( tbPrimaria.first ).column_name ) || '' IS NULL ) THEN\r\n            pkErrors.Pop;\r\n            RAISE NO_DATA_FOUND;\r\n        END IF;\r\n        pkErrors.Pop;\r\n    EXCEPTION\r\n        WHEN NO_DATA_FOUND THEN\r\n            pkErrors.SetErrorCode( csbDIVISION, csbMODULE, cnuRECORD_NO_EXISTE );\r\n            pkErrors.ADDSUFFIXTOMESSAGE ( csbTABLA_PK||''||sbCamposPKParaOutput||''||''''] )''||CHR(39)||'');\r\n            pkErrors.Pop;\r\n            RAISE LOGIN_DENIED;\r\n    END Load;\r\n    \r\n    -- Carga    \r\n    PROCEDURE LoadRecord\r\n    ('');\r\n        \r\n        for i in tbPrimaria.first .. tbPrimaria.last loop\r\n            sbCadena := tbPrimaria( i ).param_entrada;\r\n            if ( i <> tbPrimaria.last ) then\r\n                sbCadena := sbCadena || '','';\r\n            end if;\r\n            DBMS_LOB.APPEND(oclFile, CHR(10)|| ''        '' || sbCadena);\r\n        end loop;\r\n        DBMS_LOB.APPEND(oclFile, CHR(10)|| ''    )\r\n    IS\r\n    BEGIN\r\n        pkErrors.Push( ''''pktbl'' || gsbTableCap || ''.LoadRecord'''' );     \r\n        IF ( cu'' || gsbTableCap || ''%ISOPEN ) THEN\r\n            CLOSE cu'' || gsbTableCap || '';\r\n        END IF;\r\n        -- Accesa '' || upper( csbTABLA ) || '' de la BD\r\n        OPEN cu'' || gsbTableCap || ''\r\n        ('');\r\n        for i in tbPrimaria.first .. tbPrimaria.last loop\r\n            sbCadena := tbPrimaria( i ).alias;\r\n            if ( i <> tbPrimaria.last ) then\r\n                sbCadena := sbCadena || '','';\r\n            end if;\r\n            DBMS_LOB.APPEND(oclFile, CHR(10)|| ''            '' || sbCadena);\r\n        end loop;\r\n            \r\n        DBMS_LOB.APPEND(oclFile, CHR(10)|| ''        );\r\n        FETCH cu'' || gsbTableCap || '' INTO rc'' || gsbTableCap || '';\r\n        IF ( cu'' || gsbTableCap || ''%NOTFOUND ) then\r\n            rc'' || gsbTableCap || '' := rcRecordNull;\r\n        END IF;\r\n        CLOSE cu'' || gsbTableCap || '';\r\n        pkErrors.Pop;\r\n    \r\n    END LoadRecord;    \r\n    \r\n    -- Indica si está en memoria  \r\n    FUNCTION fblInMemory\r\n    ('');\r\n        \r\n        for i in tbPrimaria.first .. tbPrimaria.last loop\r\n            sbCadena := tbPrimaria( i ).param_entrada;\r\n            if ( i <> tbPrimaria.last ) then\r\n                sbCadena := sbCadena || '','';\r\n            end if;\r\n            DBMS_LOB.APPEND(oclFile, CHR(10)|| ''        '' || sbCadena);\r\n        end loop;\r\n        DBMS_LOB.APPEND(oclFile, CHR(10)|| ''    )\r\n    RETURN BOOLEAN\r\n    IS\r\n    BEGIN\r\n        pkErrors.Push( ''''pktbl'' || gsbTableCap || ''.fblInMemory'''' );\r\n        '');\r\n            \r\n        sbCadena := ''\r\n        IF ( '';\r\n            \r\n        for i in tbPrimaria.first .. tbPrimaria.last loop\r\n            sbCadena := sbCadena || ''rc'' || gsbTableCap || ''.'' || lower( tbPrimaria( i ).column_name ) || '' = '' || tbPrimaria( i ).alias;\r\n            if ( i <> tbPrimaria.first) then\r\n                sbCadena := ''\r\n            AND ''||sbCadena;\r\n            END if;\r\n            DBMS_LOB.APPEND(oclFile, sbCadena);\r\n            sbCadena := NULL;\r\n        end loop;\r\n        sbCadena := '' ) THEN'';\r\n        DBMS_LOB.APPEND(oclFile,sbCadena ||''\r\n            pkErrors.Pop;\r\n            RETURN( TRUE );\r\n        END IF;\r\n        pkErrors.Pop;\r\n        RETURN( FALSE );\r\n    \r\n    END fblInMemory;\r\n    \r\n    -- Valida si existe registro\r\n    PROCEDURE AccKey\r\n    ('');\r\n        \r\n        for i in tbPrimaria.first .. tbPrimaria.last loop\r\n            DBMS_LOB.APPEND(oclFile, CHR(10)|| ''        '' || tbPrimaria( i ).param_entrada || '','');\r\n        end loop;\r\n            \r\n        DBMS_LOB.APPEND(oclFile, CHR(10)|| ''        inuCACHE IN NUMBER DEFAULT 1\r\n    )\r\n    IS\r\n    BEGIN\r\n        pkErrors.Push( ''''pktbl'' || gsbTableCap || ''.AccKey'''' );\r\n            \r\n        --Valida si debe buscar primero en memoria Cache\r\n        IF NOT (inuCACHE = CACHE AND fblInMemory('');\r\n            \r\n        for i in tbPrimaria.first .. tbPrimaria.last loop\r\n            sbCadena := tbPrimaria( i ).alias;\r\n            if ( i <> tbPrimaria.first ) then\r\n                sbCadena := '', ''||sbCadena;\r\n            end if;\r\n            DBMS_LOB.APPEND(oclFile, sbCadena);\r\n        end loop;\r\n            \r\n        DBMS_LOB.APPEND(oclFile, '') ) THEN\r\n        \r\n            Load\r\n            ('');\r\n                \r\n            for i in tbPrimaria.first .. tbPrimaria.last loop\r\n                sbCadena := tbPrimaria( i ).alias;\r\n                if ( i <> tbPrimaria.last ) then\r\n                    sbCadena := sbCadena || '','';\r\n                end if;\r\n                DBMS_LOB.APPEND(oclFile, CHR(10)|| ''                '' || sbCadena);\r\n            end loop;\r\n                \r\n            DBMS_LOB.APPEND(oclFile, CHR(10)|| ''            );\r\n        END IF;\r\n        pkErrors.Pop;\r\n    EXCEPTION\r\n        WHEN LOGIN_DENIED THEN\r\n            pkErrors.Pop;\r\n            RAISE LOGIN_DENIED;\r\n    END AccKey;\r\n    \r\n    -- Limpia memoria\r\n    PROCEDURE ClearMemory \r\n    IS\r\n    BEGIN\r\n        pkErrors.Push( ''''pktbl'' || gsbTableCap || ''.ClearMemory'''' );\r\n        rc'' || gsbTableCap || '' := rcRecordNull;\r\n        pkErrors.Pop;\r\n    END ClearMemory;\r\n    \r\n    -- Elimina registro    \r\n    PROCEDURE DelRecord\r\n    ('');\r\n        \r\n        for i in tbPrimaria.first .. tbPrimaria.last loop\r\n            sbCadena := tbPrimaria( i ).param_entrada;\r\n            if ( i <> tbPrimaria.last ) then\r\n                sbCadena := sbCadena || '','';\r\n            end if;\r\n            DBMS_LOB.APPEND(oclFile, CHR(10)|| ''        '' || sbCadena);\r\n        end loop;\r\n        DBMS_LOB.APPEND(oclFile, CHR(10)|| ''    )\r\n    IS\r\n    BEGIN\r\n        pkErrors.Push( ''''pktbl'' || gsbTableCap || ''.DelRecord'''' );\r\n            \r\n        --Elimina registro de la Tabla '' || upper( csbTABLA ) || ''\r\n        DELETE  '' || lower( csbTABLA ));\r\n            \r\n        for i in tbPrimaria.first .. tbPrimaria.last loop\r\n            if ( i = tbPrimaria.first ) then\r\n                sbCadena := ''WHERE   '';\r\n            else\r\n                sbCadena := ''AND     '';    \r\n            end if;\r\n            \r\n            sbCadena := sbCadena || lower( tbPrimaria( i ).column_name ) || '' = '' || tbPrimaria( i ).alias;\r\n            if ( i = tbPrimaria.last ) then\r\n                sbCadena := sbCadena || '';'';\r\n            end if;\r\n            DBMS_LOB.APPEND(oclFile, CHR(10)|| ''        '' || sbCadena);\r\n        end loop;\r\n            \r\n        DBMS_LOB.APPEND(oclFile, CHR(10)|| ''\r\n        IF ( sql%NOTFOUND ) THEN\r\n            pkErrors.Pop;\r\n            RAISE NO_DATA_FOUND;\r\n        END IF;\r\n        pkErrors.Pop;\r\n            \r\n        EXCEPTION\r\n            WHEN NO_DATA_FOUND THEN\r\n                pkErrors.SetErrorCode( csbDIVISION, csbMODULE, cnuRECORD_NO_EXISTE );\r\n                pkErrors.ADDSUFFIXTOMESSAGE ( csbTABLA_PK||''||sbCamposPKParaOutput||''||''''] )''||CHR(39)||'');\r\n                pkErrors.Pop;\r\n                RAISE LOGIN_DENIED;\r\n    END DelRecord;'');\r\n        \r\n        DBMS_LOB.APPEND(oclFile, CHR(10)|| ''    \r\n    -- Elimina registros\r\n    PROCEDURE DelRecords\r\n    ('');\r\n        for i in tbPrimaria.first .. tbPrimaria.last loop\r\n            sbTipoDato := fsbTipoDato( tbPrimaria( i ).data_type, TRUE );\r\n            if ( i <> tbPrimaria.last ) then\r\n                DBMS_LOB.APPEND(oclFile, CHR(10)|| ''        '' || sbTipoDato||tbPrimaria( i ).column_name || '' IN OUT NOCOPY ty''||tbPrimaria( i ).column_name||'','');\r\n            else\r\n                DBMS_LOB.APPEND(oclFile, CHR(10)|| ''        '' || sbTipoDato||tbPrimaria( i ).column_name || '' IN OUT NOCOPY ty''||tbPrimaria( i ).column_name);\r\n            end if;\r\n        end loop;\r\n    DBMS_LOB.APPEND(oclFile,''\r\n    )\r\n    IS\r\n    BEGIN\r\n        pkErrors.Push( ''''pktbl'' || gsbTableCap || ''.DelRecords'''' );\r\n            \r\n        -- Elimina registros de la Tabla ''||lower( csbTABLA ));\r\n            \r\n        for i in tbPrimaria.first .. tbPrimaria.last loop\r\n            sbTipoDato := fsbTipoDato( tbPrimaria( i ).data_type, TRUE );\r\n            if ( i = tbPrimaria.first ) then\r\n                DBMS_LOB.APPEND(oclFile, CHR(10)|| \r\n        ''        FORALL indx IN ''||sbTipoDato||tbPrimaria( i ).column_name||''.FIRST .. ''||sbTipoDato||tbPrimaria( i ).column_name||''.LAST'');\r\n                DBMS_LOB.APPEND(oclFile, CHR(10)|| \r\n        ''        DELETE ''||tbPrimaria( i ).table_name||'' WHERE ''||tbPrimaria( i ).column_name||'' = ''||sbTipoDato||tbPrimaria( i ).column_name||''(indx)'');\r\n            elsif ( i <> tbPrimaria.last ) then\r\n                DBMS_LOB.APPEND(oclFile, CHR(10)|| \r\n        ''        AND ''||tbPrimaria( i ).column_name||'' = ''||sbTipoDato||tbPrimaria( i ).column_name||''(indx)'');\r\n            else\r\n                DBMS_LOB.APPEND(oclFile, CHR(10)|| \r\n        ''        AND ''||tbPrimaria( i ).column_name||'' = ''||sbTipoDato||tbPrimaria( i ).column_name||''(indx)'');\r\n            end if;            \r\n        end loop;\r\n        DBMS_LOB.APPEND(oclFile,'';'');\r\n            \r\n            DBMS_LOB.APPEND(oclFile, CHR(10)|| \r\n        ''\r\n        IF ( SQL%NOTFOUND ) THEN\r\n            pkErrors.Pop;\r\n            RAISE NO_DATA_FOUND;\r\n        END IF;\r\n            \r\n        pkErrors.Pop;\r\n    EXCEPTION\r\n        WHEN NO_DATA_FOUND THEN\r\n            pkErrors.SetErrorCode( csbDIVISION, csbMODULE, cnuRECORD_NO_EXISTE );   \r\n            pkErrors.ADDSUFFIXTOMESSAGE ( csb_TABLA );\r\n            pkErrors.Pop;\r\n            RAISE LOGIN_DENIED;\r\n    END DelRecords;'');\r\n        \r\n        end if;\r\n        \r\n        \r\n        DBMS_LOB.APPEND(oclFile, CHR(10)|| ''    \r\n    -- Inserta registro por columna\r\n    PROCEDURE InsForEachColumn\r\n    ('');\r\n        \r\n    for i in tbCampos.first .. tbCampos.last loop     \r\n        sbTipoDato := fsbTipoDato( tbCampos( i ).data_type );       \r\n        if ( i <> tbCampos.last ) then                              \r\n            DBMS_LOB.APPEND(oclFile, CHR(10)||          \r\n    ''       ''||sbTipoDato||tbCampos( i ).column_name||'' IN ''||lower( csbTABLA )||''.''||tbCampos( i ).column_name||''%TYPE,'');               \r\n        else\r\n            DBMS_LOB.APPEND(oclFile, CHR(10)||          \r\n    ''       ''||sbTipoDato||tbCampos( i ).column_name||'' IN ''||lower( csbTABLA )||''.''||tbCampos( i ).column_name||''%TYPE'');\r\n        end if;    \r\n    end loop;\r\n        \r\n    DBMS_LOB.APPEND(oclFile, CHR(10)|| ''\r\n    )\r\n    IS\r\n      rcRecord '' || lower( csbTABLA ) || ''%ROWTYPE;   -- Record de la Tabla ''||lower( csbTABLA )||''\r\n    BEGIN\r\n       pkErrors.Push( ''''pktbl''||lower( csbTABLA )||''.InsForEachColumn '''');'');\r\n           \r\n    for i in tbCampos.first .. tbCampos.last loop     \r\n        sbTipoDato := fsbTipoDato( tbCampos( i ).data_type );  \r\n        --rcRecord.crapcodi := inuCrapcodi;     \r\n        if ( i <> tbCampos.last ) then                              \r\n            DBMS_LOB.APPEND(oclFile, CHR(10)||          \r\n    ''       rcRecord.''||tbCampos( i ).column_name||'' := ''||sbTipoDato||tbCampos( i ).column_name||'';'');               \r\n        else\r\n            DBMS_LOB.APPEND(oclFile, CHR(10)||          \r\n    ''       rcRecord.''||tbCampos( i ).column_name||'' := ''||sbTipoDato||tbCampos( i ).column_name||'';'');\r\n        end if;    \r\n    end loop;\r\n        \r\n    DBMS_LOB.APPEND(oclFile, CHR(10)|| ''\r\n       InsRecord( rcRecord );\r\n       pkErrors.Pop;\r\n    EXCEPTION\r\n        WHEN LOGIN_DENIED THEN\r\n            pkErrors.Pop;\r\n            RAISE LOGIN_DENIED;\r\n    END InsForEachColumn;'');\r\n        \r\n        \r\n        DBMS_LOB.APPEND(oclFile, CHR(10)|| ''    \r\n    -- Inserta registro de tablas por campo masivamente\r\n    PROCEDURE InsForEachColumnBulk\r\n    ('');\r\n        \r\n    for i in tbCampos.first .. tbCampos.last loop     \r\n        sbTipoDato := fsbTipoDato( tbCampos( i ).data_type, TRUE );       \r\n        if ( i <> tbCampos.last ) then                              \r\n            DBMS_LOB.APPEND(oclFile, CHR(10)||          \r\n    ''       ''||sbTipoDato||tbCampos( i ).column_name||'' IN OUT NOCOPY ty''||tbCampos( i ).column_name||'','');               \r\n        else\r\n            DBMS_LOB.APPEND(oclFile, CHR(10)||          \r\n    ''       ''||sbTipoDato||tbCampos( i ).column_name||'' IN OUT NOCOPY ty''||tbCampos( i ).column_name);\r\n        end if;    \r\n    end loop;\r\n        \r\n    DBMS_LOB.APPEND(oclFile,''\r\n    )\r\n    IS      \r\n    BEGIN\r\n        pkErrors.Push('''' pktbl''||lower( csbTABLA )||''.InsForEachColumnBulk '''');'');\r\n           \r\n       for i in tbCampos.first .. tbCampos.last loop\r\n            sbTipoDato := fsbTipoDato( tbCampos( i ).data_type , TRUE);\r\n            if ( i = tbCampos.first ) THEN\r\n                \r\n                DBMS_LOB.APPEND(oclFile, CHR(10)||''\r\n        FORALL indx in ''||sbTipoDato||tbCampos( i ).column_name||''.FIRST .. ''||sbTipoDato||tbCampos( i ).column_name||''.LAST'');\r\n                DBMS_LOB.APPEND(oclFile,''\r\n        INSERT INTO ''||lower( csbTABLA )||''\r\n        ('');\r\n                DBMS_LOB.APPEND(oclFile,'' \r\n            ''||tbCampos( i ).column_name||'','');\r\n        \r\n            elsif ( i <> tbCampos.last ) then\r\n                DBMS_LOB.APPEND(oclFile,'' \r\n            ''||tbCampos( i ).column_name||'','');\r\n        \r\n            else\r\n                DBMS_LOB.APPEND(oclFile,'' \r\n            ''||tbCampos( i ).column_name||''\r\n        )\r\n        VALUES \r\n        ('');\r\n        \r\n            end if;            \r\n        end loop;\r\n            \r\n        for i in tbCampos.first .. tbCampos.last loop\r\n            sbTipoDato := fsbTipoDato( tbCampos( i ).data_type, TRUE );\r\n            if ( i <> tbCampos.last ) THEN\r\n                DBMS_LOB.APPEND(oclFile,''\r\n            ''||sbTipoDato||tbCampos( i ).column_name||''(indx),'');\r\n            ELSE\r\n                DBMS_LOB.APPEND(oclFile,''\r\n            ''||sbTipoDato||tbCampos( i ).column_name||''(indx)'');\r\n            END if;\r\n        END loop;\r\n        \r\n        DBMS_LOB.APPEND(oclFile,''\r\n        );'');\r\n           \r\n    DBMS_LOB.APPEND(oclFile, CHR(10)|| ''\r\n       pkErrors.Pop;\r\n    EXCEPTION\r\n        WHEN DUP_VAL_ON_INDEX THEN\r\n            pkErrors.SetErrorCode( csbDIVISION, csbMODULE, cnuRECORD_YA_EXISTE );\r\n            pkErrors.ADDSUFFIXTOMESSAGE ( csb_TABLA );\r\n            pkErrors.Pop;\r\n            RAISE LOGIN_DENIED;\r\n    END InsForEachColumnBulk;'');\r\n        \r\n        \r\n        DBMS_LOB.APPEND(oclFile, CHR(10)|| ''    \r\n    -- Inserta un registro\r\n    PROCEDURE InsRecord\r\n    (\r\n        ircRecord in '' || lower( csbTABLA ) || ''%ROWTYPE\r\n    )\r\n    IS\r\n    BEGIN\r\n        pkErrors.Push( ''''pktbl'' || gsbTableCap || ''.InsRecord'''' );\r\n            \r\n        INSERT INTO '' || lower( csbTABLA ) || ''\r\n        ('');\r\n            \r\n    for i in tbCampos.first .. tbCampos.last loop\r\n            \r\n        sbCadena := tbCampos( i ).alias;\r\n            \r\n        if ( i <> tbCampos.last ) then\r\n            sbCadena := sbCadena || '','';\r\n        end if;\r\n        DBMS_LOB.APPEND(oclFile, CHR(10)|| ''            '' || sbCadena);\r\n    end loop;\r\n            \r\n    DBMS_LOB.APPEND(oclFile, CHR(10)|| ''        ) \r\n        VALUES \r\n        ('');\r\n        \r\n    for i in tbCampos.first .. tbCampos.last loop\r\n            \r\n        sbCadena := ''ircRecord.'' || tbCampos( i ).alias;\r\n            \r\n        if ( i <> tbCampos.last ) then\r\n            sbCadena := sbCadena || '','';\r\n        end if;\r\n        DBMS_LOB.APPEND(oclFile, CHR(10)|| ''            '' || sbCadena);\r\n    end loop;\r\n    DBMS_LOB.APPEND(oclFile, CHR(10)|| ''        );\r\n        \r\n        pkErrors.Pop;\r\n    \r\n    EXCEPTION\r\n        WHEN DUP_VAL_ON_INDEX THEN\r\n            pkErrors.SetErrorCode( csbDIVISION, csbMODULE, cnuRECORD_YA_EXISTE );\r\n            pkErrors.ADDSUFFIXTOMESSAGE ( csb_TABLA );\r\n            pkErrors.Pop;\r\n            RAISE LOGIN_DENIED;\r\n    END InsRecord;'');\r\n        \r\n        \r\n        DBMS_LOB.APPEND(oclFile, CHR(10)|| ''    \r\n    -- Inserta tabla de registros\r\n    PROCEDURE InsRecords\r\n    (\r\n        irctbRecord  IN OUT NOCOPY   tytb''||csbTABLA||\r\n    ''\r\n    )\r\n    IS      \r\n    BEGIN\r\n        pkErrors.Push('''' pktbl''||lower( csbTABLA )||''.InsRecords'''' );'');\r\n           \r\n       for i in tbCampos.first .. tbCampos.last loop\r\n            sbTipoDato := fsbTipoDato( tbCampos( i ).data_type );\r\n            if ( i = tbCampos.first ) then\r\n                DBMS_LOB.APPEND(oclFile,''\r\n        FORALL indx IN irctbRecord.''||tbCampos( i ).column_name||''.FIRST .. irctbRecord.''||tbCampos( i ).column_name||''.LAST'');\r\n                DBMS_LOB.APPEND(oclFile, ''\r\n        INSERT INTO ''||lower( csbTABLA )||''\r\n        ('');\r\n                DBMS_LOB.APPEND(oclFile,''\r\n            ''||tbCampos( i ).column_name||'','');\r\n            elsif ( i <> tbCampos.last ) then\r\n                DBMS_LOB.APPEND(oclFile,'' \r\n            ''||tbCampos( i ).column_name||'','');\r\n            else\r\n                DBMS_LOB.APPEND(oclFile,'' \r\n            ''||tbCampos( i ).column_name||''\r\n         )\r\n         VALUES \r\n         ('');\r\n            end if;            \r\n        end loop;\r\n            \r\n        for i in tbCampos.first .. tbCampos.last loop\r\n            sbTipoDato := fsbTipoDato( tbCampos( i ).data_type );\r\n            if ( i <> tbCampos.last ) then\r\n                DBMS_LOB.APPEND(oclFile,''\r\n            irctbRecord.''||tbCampos( i ).column_name||''(indx),'');\r\n            else\r\n                DBMS_LOB.APPEND(oclFile,''\r\n            irctbRecord.''||tbCampos( i ).column_name||''(indx)'');\r\n            end if;            \r\n        end loop;\r\n            \r\n        DBMS_LOB.APPEND(oclFile,''\r\n        );'');\r\n           \r\n    DBMS_LOB.APPEND(oclFile, CHR(10)|| ''\r\n        pkErrors.Pop;\r\n    EXCEPTION\r\n        WHEN DUP_VAL_ON_INDEX THEN\r\n            pkErrors.SetErrorCode( csbDIVISION, csbMODULE, cnuRECORD_YA_EXISTE );\r\n            pkErrors.ADDSUFFIXTOMESSAGE ( csb_TABLA );\r\n            pkErrors.Pop;\r\n            RAISE LOGIN_DENIED;\r\n    END InsRecords;'');\r\n        \r\n        \r\n        if( tbPrimaria.first is not null ) then\r\n        \r\n            DBMS_LOB.APPEND(oclFile, CHR(10)|| ''    \r\n    -- Actualiza registro\r\n    PROCEDURE UpRecord\r\n    (\r\n        ircRecord IN '' || lower( csbTABLA ) || ''%ROWTYPE\r\n    )\r\n    IS\r\n    BEGIN\r\n        pkErrors.Push( ''''pktbl'' || gsbTableCap || ''.UpRecord'''' );\r\n            \r\n        UPDATE  '' || lower( csbTABLA ));\r\n            \r\n        for i in tbCampos.first .. tbCampos.last loop\r\n            \r\n            if ( i = tbCampos.first ) then\r\n                sbCadena := ''        SET     '' || tbCampos( i ).alias || '' = ircRecord.'' || tbCampos( i ).alias;\r\n            else\r\n                sbCadena := ''                '' || tbCampos( i ).alias || '' = ircRecord.'' || tbCampos( i ).alias;\r\n            end if;\r\n    \r\n                   \r\n            if ( i <> tbCampos.last ) then\r\n                sbCadena := sbCadena || '','';\r\n            end if;\r\n            DBMS_LOB.APPEND(oclFile, CHR(10)|| sbCadena);\r\n        end loop;\r\n            \r\n        for i in tbPrimaria.first .. tbPrimaria.last loop\r\n            if ( i = tbPrimaria.first ) then\r\n                sbCadena := ''WHERE   '';\r\n            else\r\n                sbCadena := ''AND     '';    \r\n            end if;\r\n            \r\n            sbCadena := sbCadena || lower( tbPrimaria( i ).column_name ) || '' = ircRecord.'' || lower( tbPrimaria( i ).column_name );\r\n            if ( i = tbPrimaria.last ) then\r\n                sbCadena := sbCadena || '';'';\r\n            end if;\r\n            DBMS_LOB.APPEND(oclFile, CHR(10)|| ''        '' || sbCadena);\r\n        end loop;\r\n            \r\n        DBMS_LOB.APPEND(oclFile, CHR(10)|| ''\r\n        IF ( SQL%NOTFOUND ) THEN\r\n            pkErrors.Pop;\r\n            RAISE NO_DATA_FOUND;\r\n        END IF;\r\n            \r\n        pkErrors.Pop;\r\n    \r\n    EXCEPTION\r\n        WHEN DUP_VAL_ON_INDEX THEN\r\n            pkErrors.SetErrorCode( csbDIVISION, csbMODULE, cnuRECORD_YA_EXISTE );\r\n            pkErrors.ADDSUFFIXTOMESSAGE ( csb_TABLA );\r\n            pkErrors.Pop;\r\n            RAISE LOGIN_DENIED;\r\n        WHEN NO_DATA_FOUND THEN\r\n            pkErrors.SetErrorCode( csbDIVISION, csbMODULE, cnuRECORD_NO_EXISTE );\r\n            pkErrors.ADDSUFFIXTOMESSAGE ( csb_TABLA );\r\n            pkErrors.Pop;\r\n            RAISE LOGIN_DENIED;\r\n    END UpRecord;\r\n    \r\n    -- Valida duplicados\r\n    PROCEDURE ValidateDupValues\r\n    ('');\r\n        \r\n        for i in tbPrimaria.first .. tbPrimaria.last loop\r\n            DBMS_LOB.APPEND(oclFile, CHR(10)|| ''        '' || tbPrimaria( i ).param_entrada || '','');\r\n        end loop;\r\n            \r\n        DBMS_LOB.APPEND(oclFile,''\r\n        inuCACHE    IN NUMBER DEFAULT 1\r\n    )\r\n    IS\r\n    BEGIN\r\n        pkErrors.Push( ''''pktbl'' || gsbTableCap || ''.ValidateDupValues'''' );\r\n            \r\n        --Valida si el registro ya existe\r\n        IF ( fblExist( '');\r\n            \r\n        for i in tbPrimaria.first .. tbPrimaria.last loop\r\n            DBMS_LOB.APPEND(oclFile, tbPrimaria( i ).alias|| '', '');\r\n        end loop;\r\n            \r\n        DBMS_LOB.APPEND(oclFile, ''inuCACHE ) ) THEN\r\n            pkErrors.SetErrorCode( csbDIVISION, csbMODULE, cnuRECORD_YA_EXISTE );\r\n            pkErrors.ADDSUFFIXTOMESSAGE ( csbTABLA_PK||''||sbCamposPKParaOutput||''||''''] )''||CHR(39)||'');\r\n            RAISE LOGIN_DENIED;\r\n        END IF;\r\n            \r\n        pkErrors.Pop;\r\n         \r\n    EXCEPTION\r\n        WHEN LOGIN_DENIED THEN\r\n            pkErrors.Pop;\r\n            RAISE LOGIN_DENIED;\r\n    END ValidateDupValues;\r\n    \r\n    -- Valida si el registro existe\r\n    FUNCTION fblExist\r\n    ('');\r\n        \r\n        for i in tbPrimaria.first .. tbPrimaria.last loop\r\n            DBMS_LOB.APPEND(oclFile, CHR(10)|| ''        '' || tbPrimaria( i ).param_entrada || '','');\r\n        end loop;\r\n            \r\n        DBMS_LOB.APPEND(oclFile, CHR(10)|| ''        inuCACHE    IN NUMBER DEFAULT 1\r\n    )\r\n    RETURN BOOLEAN\r\n    IS\r\n    BEGIN\r\n        pkErrors.Push( ''''pktbl'' || gsbTableCap || ''.fblExist'''' );\r\n            \r\n        --Valida si debe buscar primero en memoria Caché\r\n        IF (inuCACHE = CACHE AND fblInMemory( '');\r\n            \r\n        for i in tbPrimaria.first .. tbPrimaria.last loop\r\n            sbCadena := tbPrimaria( i ).alias;\r\n            if ( i <> tbPrimaria.last ) then\r\n                sbCadena := sbCadena || '','';\r\n            end if;\r\n            DBMS_LOB.APPEND(oclFile, sbCadena);\r\n        end loop;\r\n            \r\n        DBMS_LOB.APPEND(oclFile, '' ) ) THEN\r\n                pkErrors.Pop;\r\n                RETURN( TRUE );\r\n        END IF;\r\n        LoadRecord\r\n        ('');\r\n            \r\n        for i in tbPrimaria.first .. tbPrimaria.last loop\r\n            sbCadena := tbPrimaria( i ).alias;\r\n            if ( i <> tbPrimaria.last ) then\r\n                sbCadena := sbCadena || '','';\r\n            end if;\r\n            DBMS_LOB.APPEND(oclFile, CHR(10)|| ''            '' || sbCadena);\r\n        end loop;\r\n            \r\n        DBMS_LOB.APPEND(oclFile, CHR(10)|| ''        );\r\n            \r\n        -- Evalúa si se encontro el registro en la Base de datos\r\n        IF ( rc'' || gsbTableCap || ''.'' || lower( tbPrimaria( tbPrimaria.first ).column_name ) || '' IS NULL ) THEN\r\n            pkErrors.Pop;\r\n            RETURN( FALSE );\r\n        END IF;\r\n            \r\n        pkErrors.Pop;\r\n    \r\n        RETURN( TRUE );\r\n        \r\n    END fblExist;\r\n    \r\n    -- Obtiene el registro\r\n    FUNCTION frcGetRecord\r\n    ('');\r\n        \r\n        for i in tbPrimaria.first .. tbPrimaria.last loop\r\n            DBMS_LOB.APPEND(oclFile, CHR(10)|| ''        '' || tbPrimaria( i ).param_entrada || '','');\r\n        end loop;\r\n            \r\n        DBMS_LOB.APPEND(oclFile, CHR(10)|| ''        inuCACHE    IN NUMBER DEFAULT 1\r\n    )\r\n    RETURN '' || lower( csbTABLA ) || ''%ROWTYPE\r\n    IS\r\n    BEGIN\r\n        pkErrors.Push( ''''pktbl'' || gsbTableCap || ''.frcGetRecord'''' );\r\n            \r\n        --Valida si el registro ya existe\r\n        AccKey\r\n        ('');\r\n            \r\n        for i in tbPrimaria.first .. tbPrimaria.last loop\r\n            DBMS_LOB.APPEND(oclFile, CHR(10)|| ''            '' || tbPrimaria( i ).alias || '','');\r\n        end loop;\r\n            \r\n        DBMS_LOB.APPEND(oclFile, CHR(10)|| ''            inuCACHE\r\n        );\r\n    \r\n        pkErrors.Pop;\r\n        RETURN ( rc'' || gsbTableCap || '' );\r\n         \r\n    EXCEPTION\r\n        WHEN LOGIN_DENIED THEN\r\n            pkErrors.Pop;\r\n            RAISE LOGIN_DENIED;\r\n    END frcGetRecord;\r\n    '');\r\n            \r\n    /* Recorre los campos creando las funciones para obtener campos puntuales */\r\n    FOR i in tbCampos.FIRST .. tbCampos.LAST LOOP    \r\n        \r\n        -- No crea método para obtener o actualizar pk\r\n        IF ( fboCampoEnPrimaryKey( tbPrimaria, tbCampos(i).column_name )) THEN\r\n            CONTINUE;\r\n        END IF;\r\n                              \r\n        -- Reemplaza el nombre de la tabla\r\n        sbFunction := REPLACE(csbTemplateFunction, ''<Tabla>'', Initcap(csbTABLA));                    \r\n                        \r\n        -- Reemplaza el nombre del campo\r\n        sbFunction := REPLACE(sbFunction, ''<Campo>'', Initcap(tbCampos(i).column_name));                                \r\n                        \r\n        -- Reemplazan parámetros de entrada que son campos de la PK\r\n        sbFunction := REPLACE(sbFunction, ''<ParamPK>'', sbParamPK);\r\n\r\n        -- Reemplaza las variables de la pk\r\n        sbFunction := REPLACE(sbFunction, ''<pk>'', sbVariablesPK);\r\n\r\n        -- Reemplaza el tipo de función según el tipo de dato\r\n        sbFunction := REPLACE(sbFunction, ''<Type>'', fsbTipoDato(tbCampos(i).data_type , FALSE, TRUE) );\r\n\r\n        -- Escribe la función\r\n        DBMS_LOB.APPEND(oclFile, sbFunction);\r\n\r\n    END LOOP;\r\n    \r\n    /* Recorre los campos creando los procedimientos para actualizar campos puntuales */\r\n    FOR i in tbCampos.FIRST .. tbCampos.LAST LOOP    \r\n\r\n        -- No crea método para obtener o actualizar pk\r\n        IF ( fboCampoEnPrimaryKey( tbPrimaria, tbCampos(i).column_name )) THEN\r\n            CONTINUE;\r\n        END IF;\r\n\r\n        -- Reemplaza el nombre de la tabla\r\n        sbFunction := REPLACE(csbTemplateUpdate, ''<Tabla>'', Initcap(csbTABLA));                    \r\n                        \r\n        -- Reemplaza el nombre del campo\r\n        sbFunction := REPLACE(sbFunction, ''<Campo>'', Initcap(tbCampos(i).column_name));\r\n        \r\n        -- Reemplaza el parámetro de entrada el campo\r\n        sbFunction := REPLACE(sbFunction, ''<ParamCampo>'', tbCampos(i).param_entrada );\r\n        \r\n        -- Reemplaza el nombre del parámetro de entrada del campo\r\n        sbFunction := REPLACE(sbFunction, ''<AliasCampo>'', tbCampos(i).param_alias );\r\n                        \r\n        -- Reemplazan parámetros de entrada que son campos de la PK\r\n        sbFunction := REPLACE(sbFunction, ''<ParamPK>'', sbParamPK);\r\n\r\n        -- Reemplaza las variables de la pk\r\n        sbFunction := REPLACE(sbFunction, ''<pk>'', sbVariablesPK);\r\n\r\n        -- Reemplaza el tipo de función según el tipo de dato\r\n        sbFunction := REPLACE(sbFunction, ''<Type>'', fsbTipoDato(tbCampos(i).data_type , FALSE, TRUE) );\r\n\r\n        -- Reemplaza los campos de la pk en el Where del update\r\n        sbFunction := REPLACE(sbFunction, ''<Condicion>'', sbWherePorPK);\r\n\r\n        -- Reemplaza los campos de la pk en el mensaje de error\r\n        sbFunction := REPLACE(sbFunction, ''<sbCamposPKParaOutput>'', sbCamposPKParaOutputCom);\r\n\r\n        -- Reemplaza los campos de la pk en el mensaje de error\r\n        sbFunction := REPLACE(sbFunction, ''<sbCamposPKParaOutputSinCom>'', sbCamposPKParaOutput);\r\n\r\n        -- Escribe la función\r\n        DBMS_LOB.APPEND(oclFile, sbFunction);\r\n\r\n    END LOOP;    \r\n    \r\n    END IF;\r\n        \r\n        DBMS_LOB.APPEND(oclFile, CHR(10)||''END pktbl'' || gsbTableCap || '';''||CHR(10)||''/'');\r\n    \r\n        --utl_file.fclose( flArchivo );\r\n        \r\n        dbms_output.put_line( ''Se creó el archivo PKTBL'' || upper( csbTABLA ) || ''.sql en la ruta '' || csbRUTA_ARCHIVO );\r\n    EXCEPTION\r\n        when OTHERS then\r\n            onuErrorCode := 100;\r\n            osbErrorMessage := sqlerrm;\r\n            dbms_output.put_line( sqlerrm );\r\n            /*if ( utl_file.is_open( flArchivo )) then\r\n                utl_file.fclose( flArchivo );\r\n            end if;*/\r\n    END;    \r\nbegin\r\n    pGenerapktbl(:isbTabla,:isbOwner,:isOrder,:oclFile,:onuErrorCode,:osbErrorMessage);\r\nend;\r\n');"
                };

                foreach (string sql in query)
                {
                    try
                    {
                        SqliteDAO.pExecuteNonQuery(sql);
                    }
                    catch (Exception ex) { }
                }

                SqliteDAO.pActualizaVersion("1.1.8.8");
            }

            if (!SqliteDAO.pblValidaVersion("1.1.8.9"))
            {
                string[] query =
                 {
                    "alter table repositories add tipo_dato INTEGER",
                    "update repositories set tipo_dato = 16 where descripcion = 'ActualizacionDatos'"
                };

                foreach (string sql in query)
                {
                    try
                    {
                        SqliteDAO.pExecuteNonQuery(sql);
                    }
                    catch (Exception ex) { }
                }

                SqliteDAO.pActualizaVersion("1.1.8.9");
            }

            if (!SqliteDAO.pblValidaVersion("1.1.9.2"))
            {
                string[] query =
                 {
                    //SFDLLO
                    "update cy_userbd set password_ = 'N0M30LVid3s+-' where codigo = 1",
                    //SFUAT
                    "update cy_userbd set password_ = 'N0M3Vay4aBloqu34r-+' where codigo = 2",
                    //SFPDN
                    "update cy_userbd set password_ = 'N0M3Vay4aBloqu34r-+' where codigo = 3"
                };

                foreach (string sql in query)
                {
                    try
                    {
                        SqliteDAO.pExecuteNonQuery(sql);
                    }
                    catch (Exception ex) { }
                }

                SqliteDAO.pActualizaVersion("1.1.9.2");
            }

            //ultima versión
            /*if (!SqliteDAO.pblValidaVersion(fieVersionInfo.FileVersion))
            {
                //SqliteDAO.pCreaConfiguracion(res.KEY_EMPRESA, "99");
                //handler.pRegeneraIndexListas();

                //SqliteDAO.pCreaConfiguracion(res.KEY_LLAVEW, @"HKEY_CURRENT_USER\Software\Classes\osfweb\shell\open\command");

                //Se actualiza la versión
                SqliteDAO.pActualizaVersion(fieVersionInfo.FileVersion);                
            }*/
        }
    }
}
/*"drop table repositories",
                        "CREATE TABLE repositories (codigo	INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,	descripcion	TEXT,	documento	TEXT,	ruta_local	TEXT,empresa	INTEGER,	FOREIGN KEY(empresa) REFERENCES company(codigo))",
                        "drop table repository_branch",
                        "CREATE TABLE repository_branch (codigo	INTEGER PRIMARY KEY AUTOINCREMENT,repositorio_id	INTEGER,rama	TEXT,estandar TEXT, lbase TEXT)",
                        RepoObj,
                        RepoDat,
                        "insert into repository_branch (repositorio_id,rama,estandar,lbase) values (1,'desarrollo','feature/[HU]_[USUARIO]_DLL','N')",
                        "insert into repository_branch (repositorio_id,rama,estandar,lbase) values (1,'pruebas','feature/[HU]_[USUARIO]_PRU','N')",
                        "insert into repository_branch (repositorio_id,rama,estandar,lbase) values (1,'produccion','feature/[HU]_[USUARIO]_PDN','S')",
                        "insert into repository_branch (repositorio_id,rama,estandar,lbase) values (2,'master-datos','feature/[HU]_[USUARIO]','S')",
                        "delete from object_path",
                        "INSERT INTO object_path (codigo, object_type, path, user_default, company) VALUES ('1', '1', '[usuario]\\server\\sql\\03fnc\\[nombre]', '', '99')",
                        "INSERT INTO object_path (codigo, object_type, path, user_default, company) VALUES ('2', '2', '[usuario]\\server\\sql\\04proc\\[nombre]', '', '99')",
                        "INSERT INTO object_path (codigo, object_type, path, user_default, company) VALUES ('3', '3', '[usuario]\\server\\sql\\05pkg\\[nombre]', '', '99')",
                        "INSERT INTO object_path (codigo, object_type, path, user_default, company) VALUES ('4', '4', '[usuario]\\server\\sql\\02tbls\\[nombre]\\05trg', '', '99')",
                        "INSERT INTO object_path (codigo, object_type, path, user_default, company) VALUES ('5', '5', '[usuario]\\server\\sql\\02tbls\\[nombre]\\00tbl', '', '99')",
                        "INSERT INTO object_path (codigo, object_type, path, user_default, company) VALUES ('6', '6', '[usuario]\\server\\sql\\01seq\\[nombre]', '', '99')",
                        "INSERT INTO object_path (codigo, object_type, path, user_default, company) VALUES ('7', '7', '[usuario]\\server\\sql\\06view\\[nombre]', '', '99')",
                        "INSERT INTO object_path (codigo, object_type, path, user_default, company) VALUES ('8', '8', '[usuario]\\server\\sql\\02tbls\\[nombre]\\02idx', '', '99')",
                        "INSERT INTO object_path (codigo, object_type, path, user_default, company) VALUES ('9', '9', '[usuario]\\server\\sql\\02tbls\\[nombre]\\11syn', '', '99')",
                        "INSERT INTO object_path (codigo, object_type, path, user_default, company) VALUES ('10', '10', '[usuario]\\server\\sql\\02tbls\\[nombre]\\00tbl', '', '99')",
                        "INSERT INTO object_path (codigo, object_type, path, user_default, company) VALUES ('11', '11', '[usuario]\\server\\sql\\02tbls\\[nombre]\\00tbl', '', '99')",
                        "INSERT INTO object_path (codigo, object_type, path, user_default, company) VALUES ('12', '12', '[usuario]\\server\\sql\\02tbls\\[nombre]\\06data', '', '99')",
                        "INSERT INTO object_path (codigo, object_type, path, user_default, company) VALUES ('13', '13', '[usuario]\\server\\sql\\02tbls\\[nombre]\\06data', '', '99')",
                        "INSERT INTO object_path (codigo, object_type, path, user_default, company) VALUES ('14', '14', '[usuario]\\server\\sql\\02tbls\\[nombre]\\06data', '', '99')",
                        "INSERT INTO object_path (codigo, object_type, path, user_default, company) VALUES ('15', '15', '', '', '99')",
                        "INSERT INTO object_path (codigo, object_type, path, user_default, company) VALUES ('16', '16', 'Despliegues\\[hu]', '', '99')",
                        "INSERT INTO object_path (codigo, object_type, path, user_default, company) VALUES ('17', '17', '[usuario]\\server\\sql\\02tbls\\[nombre]\\06data', '', '99')",
                        "INSERT INTO object_path (codigo, object_type, path, user_default, company) VALUES ('18', '18', '[usuario]\\server\\sql\\02tbls\\[nombre]\\01pkey', '', '99')",
                        "INSERT INTO object_path (codigo, object_type, path, user_default, company) VALUES ('19', '19', '[usuario]\\server\\sql\\02tbls\\[nombre]\\03fkey', '', '99')",
                        "INSERT INTO object_path (codigo, object_type, path, user_default, company) VALUES ('20', '20', '[usuario]\\server\\sql\\02tbls\\[nombre]\\04chk', '', '99')",
                        "INSERT INTO object_path (codigo, object_type, path, user_default, company) VALUES ('21', '21', '[usuario]\\server\\sql\\07vwmat\\[nombre]', '', '99')",
                        "INSERT INTO object_path (codigo, object_type, path, user_default, company) VALUES ('22', '22', '[usuario]\\server\\sql\\09job\\[nombre]', '', '99')",
                        "INSERT INTO object_path (codigo, object_type, path, user_default, company) VALUES ('23', '23', '[usuario]\\server\\sql\\10grt\\[nombre]', '', '99')",
                        "INSERT INTO object_path (codigo, object_type, path, user_default, company) VALUES ('24', '24', 'client\\framework\\EA\\[nombre]', 'FLEX', '99')",
                        "INSERT INTO object_path (codigo, object_type, path, user_default, company) VALUES ('25', '25', 'client\\framework\\GI\\[nombre]', 'FLEX', '99')",
                        "INSERT INTO object_path (codigo, object_type, path, user_default, company) VALUES ('26', '26', 'client\\framework\\GR\\[nombre]', 'FLEX', '99')",
                        "INSERT INTO object_path (codigo, object_type, path, user_default, company) VALUES ('27', '27', 'client\\framework\\MD\\[nombre]', 'FLEX', '99')",
                        "INSERT INTO object_path (codigo, object_type, path, user_default, company) VALUES ('28', '28', 'client\\framework\\OB\\[nombre]', 'FLEX', '99')",
                        "INSERT INTO object_path (codigo, object_type, path, user_default, company) VALUES ('29', '29', 'client\\framework\\OP\\[nombre]', 'FLEX', '99')",
                        "INSERT INTO object_path (codigo, object_type, path, user_default, company) VALUES ('30', '30', 'client\\framework\\PB\\[nombre]', 'FLEX', '99')",
                        "INSERT INTO object_path (codigo, object_type, path, user_default, company) VALUES ('31', '31', 'client\\framework\\PI\\[nombre]', 'FLEX', '99')",
                        "INSERT INTO object_path (codigo, object_type, path, user_default, company) VALUES ('32', '32', 'client\\framework\\RU\\[nombre]', 'FLEX', '99')",
                        "INSERT INTO object_path (codigo, object_type, path, user_default, company) VALUES ('33', '33', 'client\\framework\\TC\\[nombre]', 'FLEX', '99')",
                        "INSERT INTO object_type (codigo, object, slash, count_slash, priority, grant) VALUES ('34', 'Aplica', '', '0', '200', 'No')",
                        "INSERT INTO object_path (codigo, object_type, path, user_default, company) VALUES ('34', '34', 'Despliegues\\[hu]', '', '99')"
                        "CREATE TABLE story_user ( 	codigo	INTEGER, 	descripcion	TEXT, 	usuario	TEXT, 	empresa	INTEGER, 	FOREIGN KEY(empresa) REFERENCES company(codigo), 	PRIMARY KEY(codigo) )",
                        "CREATE TABLE task_user ( 	codigo	INTEGER PRIMARY KEY AUTOINCREMENT, 	descripcion	TEXT, 	estado	TEXT, 	fecha_actualiza	TEXT, 	usuario	TEXT, 	completado	NUMERIC, 	fecha_display	TEXT, 	fecha_registro	TEXT, 	hist_usuario	INTEGER, 	fecha_inicio	TEXT, 	empresa	INTEGER, 	FOREIGN KEY(empresa) REFERENCES company(codigo), 	FOREIGN KEY(hist_usuario) REFERENCES story_user(codigo) )",
                        "CREATE TABLE week ( 	codigo	INTEGER PRIMARY KEY AUTOINCREMENT, 	fecha_ini	TEXT, 	fecha_fin	TEXT, 	descripcion	TEXT )",
                        "CREATE TABLE timexweek ( 	codigo	INTEGER PRIMARY KEY AUTOINCREMENT, 	id_hoja	INTEGER, 	fecha_registro	TEXT, 	usuario	BLOB, 	lunes	NUMERIC, 	martes	NUMERIC, 	miercoles	NUMERIC, 	jueves	NUMERIC, 	viernes	NUMERIC, 	sabado	NUMERIC, 	domingo	NUMERIC, 	fecha_actualiza	TEXT, 	observacion	TEXT, 	requerimiento	INTEGER, 	FOREIGN KEY(id_hoja) REFERENCES week(codigo), 	FOREIGN KEY(requerimiento) REFERENCES task_user(codigo) )",
                        "CREATE TABLE sequence ( 	codigo	INTEGER PRIMARY KEY AUTOINCREMENT ) ",
                        "insert into sequence (codigo) values (null)",
                        "CREATE TABLE task_pred ( 	codigo	INTEGER, 	descripcion	TEXT, 	PRIMARY KEY(codigo) )",
                        "insert into task_pred (CODIGO, DESCRIPCION) values (-1, 'Vacaciones')",
                        "insert into task_pred (CODIGO, DESCRIPCION) values (-2, 'Beneficio')",
                        "insert into task_pred (CODIGO, DESCRIPCION) values (-3, 'Calamidad')",
                        "insert into task_pred (CODIGO, DESCRIPCION) values (-4, 'Incapacidad')",
                        "insert into task_pred (CODIGO, DESCRIPCION) values (-5, 'Permiso')",
                        "insert into task_pred (CODIGO, DESCRIPCION) values (-6, 'Compensatorio')",
                        "insert into task_pred (CODIGO, DESCRIPCION) values (-7, 'Día Familia')",
                        "INSERT INTO azure (codigo,usuario, correo, dias, url, empresa, defecto, token, proyecto) VALUES (1,'', '', '10', 'https://grupoepm.visualstudio.com', '99', 'S', '"+res.TokenAzureConn+"', 'OPEN')",
                        "alter table company add defecto text",
                        "update company set defecto = 'Y' where codigo = 99"
                        "DROP table object_type",
                        "CREATE TABLE object_type (    codigo  INTEGER PRIMARY KEY AUTOINCREMENT,    object  TEXT,    slash   TEXT,    count_slash INTEGER,    priority    TEXT,    grant   BLOB)",
                        "CREATE TABLE object_path (    codigo  INTEGER PRIMARY KEY AUTOINCREMENT,    object_type INTEGER,    path    TEXT,    user_default    TEXT,    company INTEGER,    FOREIGN KEY(object_type) REFERENCES object_type(codigo))",
                        "insert into object_type (codigo,object,slash,count_slash,priority,grant) values (1,'Funcion','S',1,300,'E')",
                        "insert into object_type (codigo,object,slash,count_slash,priority,grant) values (2,'procedimiento','S',1,301,'E')",
                        "insert into object_type (codigo,object,slash,count_slash,priority,grant) values (3,'paquete','S',1,302,'E')",
                        "insert into object_type (codigo,object,slash,count_slash,priority,grant) values (4,'trigger','S',1,303,'N')",
                        "insert into object_type (codigo,object,slash,count_slash,priority,grant) values (5,'tabla','N',0,100,'S|I|U|D')",
                        "insert into object_type (codigo,object,slash,count_slash,priority,grant) values (6,'secuencia','N',0,104,'S')",
                        "insert into object_type (codigo,object,slash,count_slash,priority,grant) values (7,'vista','N',0,103,'S')",
                        "insert into object_type (codigo,object,slash,count_slash,priority,grant) values (8,'indice','N',0,101,'N')",
                        "insert into object_type (codigo,object,slash,count_slash,priority,grant) values (9,'sinonimo','N',0,108,'N')",
                        "insert into object_type (codigo,object,slash,count_slash,priority,grant) values (10,'alter','N',0,105,'N')",
                        "insert into object_type (codigo,object,slash,count_slash,priority,grant) values (11,'drop','N',0,1,'N')",
                        "insert into object_type (codigo,object,slash,count_slash,priority,grant) values (12,'insert','N',0,201,'N')",
                        "insert into object_type (codigo,object,slash,count_slash,priority,grant) values (13,'update','N',0,202,'N')",
                        "insert into object_type (codigo,object,slash,count_slash,priority,grant) values (14,'delete','N',0,200,'N')",
                        "insert into object_type (codigo,object,slash,count_slash,priority,grant) values (15,'script','S',1,400,'N')",
                        "insert into object_type (codigo,object,slash,count_slash,priority,grant) values (16,'otros','N',0,500,'N')",
                        "insert into object_type (codigo,object,slash,count_slash,priority,grant) values (17,'merge','N',0,203,'N')",
                        "insert into object_type (codigo,object,slash,count_slash,priority,grant) values (18,'llave_primaria','',0,110,'N')",
                        "insert into object_type (codigo,object,slash,count_slash,priority,grant) values (19,'llave_foranea','',0,111,'N')",
                        "insert into object_type (codigo,object,slash,count_slash,priority,grant) values (20,'llave_unica','',0,113,'N')",
                        "insert into object_type (codigo,object,slash,count_slash,priority,grant) values (21,'vista_mat','',0,114,'N')",
                        "insert into object_type (codigo,object,slash,count_slash,priority,grant) values (22,'job','',0,401,'N')",
                        "insert into object_type (codigo,object,slash,count_slash,priority,grant) values (23,'grant','',0,402,'N')",
                        "insert into object_type (codigo,object,slash,count_slash,priority,grant) values (24,'EA','',0,501,'N')",
                        "insert into object_type (codigo,object,slash,count_slash,priority,grant) values (25,'GI','',0,502,'N')",
                        "insert into object_type (codigo,object,slash,count_slash,priority,grant) values (26,'GR','',0,503,'N')",
                        "insert into object_type (codigo,object,slash,count_slash,priority,grant) values (27,'MD','',0,504,'N')",
                        "insert into object_type (codigo,object,slash,count_slash,priority,grant) values (28,'OB','',0,505,'N')",
                        "insert into object_type (codigo,object,slash,count_slash,priority,grant) values (29,'OP','',0,506,'N')",
                        "insert into object_type (codigo,object,slash,count_slash,priority,grant) values (30,'PB','',0,507,'N')",
                        "insert into object_type (codigo,object,slash,count_slash,priority,grant) values (31,'PI','',0,508,'N')",
                        "insert into object_type (codigo,object,slash,count_slash,priority,grant) values (32,'RU','',0,509,'N')",
                        "insert into object_type (codigo,object,slash,count_slash,priority,grant) values (33,'TC','',0,510,'N')",
                        "insert into object_path (object_type,path,user_default,company) values (1,'server\\sql\\03fnc\\[nombre]','',99)",
                        "insert into object_path (object_type,path,user_default,company) values (2,'server\\sql\\04proc\\[nombre]','',99)",
                        "insert into object_path (object_type,path,user_default,company) values (3,'server\\sql\\05pkg\\[nombre]','',99)",
                        "insert into object_path (object_type,path,user_default,company) values (4,'server\\sql\\02tbls\\[nombre]\\05trg','',99)",
                        "insert into object_path (object_type,path,user_default,company) values (5,'server\\sql\\02tbls\\[nombre]\\00tbl','',99)",
                        "insert into object_path (object_type,path,user_default,company) values (6,'server\\sql\\01seq\\[nombre]','',99)",
                        "insert into object_path (object_type,path,user_default,company) values (7,'server\\sql\\06view\\[nombre]','',99)",
                        "insert into object_path (object_type,path,user_default,company) values (8,'server\\sql\\02tbls\\[nombre]\\02idx','',99)",
                        "insert into object_path (object_type,path,user_default,company) values (9,'server\\sql\\02tbls\\[nombre]\\11syn','',99)",
                        "insert into object_path (object_type,path,user_default,company) values (10,'server\\sql\\02tbls\\[nombre]\\00tbl','',99)",
                        "insert into object_path (object_type,path,user_default,company) values (11,'server\\sql\\02tbls\\[nombre]\\00tbl','',99)",
                        "insert into object_path (object_type,path,user_default,company) values (12,'server\\sql\\02tbls\\[nombre]\\06data','',99)",
                        "insert into object_path (object_type,path,user_default,company) values (13,'server\\sql\\02tbls\\[nombre]\\06data','',99)",
                        "insert into object_path (object_type,path,user_default,company) values (14,'server\\sql\\02tbls\\[nombre]\\06data','',99)",
                        "insert into object_path (object_type,path,user_default,company) values (15,'','',99)",
                        "insert into object_path (object_type,path,user_default,company) values (16,'','',99)",
                        "insert into object_path (object_type,path,user_default,company) values (17,'server\\sql\\02tbls\\[nombre]\\06data','',99)",
                        "insert into object_path (object_type,path,user_default,company) values (18,'server\\sql\\02tbls\\[nombre]\\01pkey','',99)",
                        "insert into object_path (object_type,path,user_default,company) values (19,'server\\sql\\02tbls\\[nombre]\\03fkey','',99)",
                        "insert into object_path (object_type,path,user_default,company) values (20,'server\\sql\\02tbls\\[nombre]\\04chk','',99)",
                        "insert into object_path (object_type,path,user_default,company) values (21,'server\\sql\\07vwmat\\[nombre]','',99)",
                        "insert into object_path (object_type,path,user_default,company) values (22,'server\\sql\\09job\\[nombre]','',99)",
                        "insert into object_path (object_type,path,user_default,company) values (23,'server\\sql\\10grt\\[nombre]','',99)",
                        "insert into object_path (object_type,path,user_default,company) values (24,'client\\framework\\EA\\[nombre]','FLEX',99)",
                        "insert into object_path (object_type,path,user_default,company) values (25,'client\\framework\\GI\\[nombre]','FLEX',99)",
                        "insert into object_path (object_type,path,user_default,company) values (26,'client\\framework\\GR\\[nombre]','FLEX',99)",
                        "insert into object_path (object_type,path,user_default,company) values (27,'client\\framework\\MD\\[nombre]','FLEX',99)",
                        "insert into object_path (object_type,path,user_default,company) values (28,'client\\framework\\OB\\[nombre]','FLEX',99)",
                        "insert into object_path (object_type,path,user_default,company) values (29,'client\\framework\\OP\\[nombre]','FLEX',99)",
                        "insert into object_path (object_type,path,user_default,company) values (30,'client\\framework\\PB\\[nombre]','FLEX',99)",
                        "insert into object_path (object_type,path,user_default,company) values (31,'client\\framework\\PI\\[nombre]','FLEX',99)",
                        "insert into object_path (object_type,path,user_default,company) values (32,'client\\framework\\RU\\[nombre]','FLEX',99)",
                        "insert into object_path (object_type,path,user_default,company) values (33,'client\\framework\\TC\\[nombre]','FLEX',99)",
                        "INSERT INTO configuration (key, value) VALUES ('SQLPLUS', (select path from paths where name = 'SQLPLUS'))",
                        "INSERT INTO configuration (key,value) VALUES ('EMPRESA','-')",
                        */
